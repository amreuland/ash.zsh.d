// Override key bindings by placing them into your key bindings file.
[
  // removedkeys
  {
    "key": "ctrl+end",
    "command": "-cursorBottom",
    "when": "textInputFocus"
  },
  // addedkey
  {
    "key": "meta+down",
    "command": "cursorBottom",
    "when": "textInputFocus"
  },
  // removedkey
  {
    "key": "ctrl+shift+down",
    "command": "-cursorBottomSelect",
    "when": "textInputFocus"
  },
  // addedkey
  {
    "key": "shift+meta+down",
    "command": "cursorBottomSelect",
    "when": "textInputFocus"
  },
  // addedkey
  {
    "key": "shift+alt+meta+down",
    "command": "cursorColumnSelectDown",
    "when": "textInputFocus"
  },
  // addedkey
  {
    "key": "shift+alt+meta+left",
    "command": "cursorColumnSelectLeft",
    "when": "textInputFocus"
  },
  // addedkey
  {
    "key": "shift+alt+meta+pagedown",
    "command": "cursorColumnSelectPageDown",
    "when": "textInputFocus"
  },
  // addedkey
  {
    "key": "shift+alt+meta+pageup",
    "command": "cursorColumnSelectPageUp",
    "when": "textInputFocus"
  },
  // addedkey
  {
    "key": "shift+alt+meta+right",
    "command": "cursorColumnSelectRight",
    "when": "textInputFocus"
  },
  // addedkey
  {
    "key": "shift+alt+meta+up",
    "command": "cursorColumnSelectUp",
    "when": "textInputFocus"
  },
  // addedkey shortkey
  {
    "key": "ctrl+n",
    "command": "cursorDown",
    "when": "textInputFocus"
  },
  // addedkey
  {
    "key": "meta+right",
    "command": "cursorEnd",
    "when": "textInputFocus",
    "args": {
      "sticky": false
    }
  },
  // addedkey
  {
    "key": "shift+meta+right",
    "command": "cursorEndSelect",
    "when": "textInputFocus",
    "args": {
      "sticky": false
    }
  },
  // addedkey
  {
    "key": "meta+left",
    "command": "cursorHome",
    "when": "textInputFocus"
  },
  // addedkey
  {
    "key": "shift+meta+left",
    "command": "cursorHomeSelect",
    "when": "textInputFocus"
  },
  // addedkey shortkey
  {
    "key": "ctrl+b",
    "command": "cursorLeft",
    "when": "textInputFocus"
  },
  // addedkey shortkey
  {
    "key": "ctrl+e",
    "command": "cursorLineEnd",
    "when": "textInputFocus"
  },
  // addedkey shortkey
  {
    "key": "ctrl+shift+e",
    "command": "cursorLineEndSelect",
    "when": "textInputFocus"
  },
  // addedkey shortkey
  {
    "key": "ctrl+a",
    "command": "cursorLineStart",
    "when": "textInputFocus"
  },
  // addedkey shortkey
  {
    "key": "ctrl+shift+a",
    "command": "cursorLineStartSelect",
    "when": "textInputFocus"
  },
  // mayberemove
  {
    "key": "pagedown",
    "command": "cursorPageDown",
    "when": "textInputFocus"
  },
  // mayberemove
  {
    "key": "shift+pagedown",
    "command": "cursorPageDownSelect",
    "when": "textInputFocus"
  },
  // mayberemove
  {
    "key": "pageup",
    "command": "cursorPageUp",
    "when": "textInputFocus"
  },
  // mayberemove
  {
    "key": "shift+pageup",
    "command": "cursorPageUpSelect",
    "when": "textInputFocus"
  },
  // removedkey
  {
    "key": "ctrl+home",
    "command": "-cursorTop",
    "when": "textInputFocus"
  },
  // addedkey
  {
    "key": "meta+up",
    "command": "cursorTop",
    "when": "textInputFocus"
  },
  // removedkey
  {
    "key": "ctrl+shift+home",
    "command": "-cursorTopSelect",
    "when": "textInputFocus"
  },
  // addedkey
  {
    "key": "shift+meta+up",
    "command": "cursorTopSelect",
    "when": "textInputFocus"
  },
  // addedkey
  {
    "key": "ctrl+backspace",
    "command": "deleteLeft",
    "when": "textInputFocus"
  },
  // addedkey shortkey
  {
    "key": "ctrl+h",
    "command": "deleteLeft",
    "when": "textInputFocus"
  },
  // addedkey
  {
    "key": "ctrl+delete",
    "command": "deleteRight",
    "when": "textInputFocus"
  },
  {
    "key": "delete",
    "command": "deleteRight",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+o",
    "command": "lineBreakInsert",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "shift+tab",
    "command": "outdent",
    "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus"
  },
  // removedkey
  {
    "key": "ctrl+y",
    "command": "-redo"
  },
  // removedkey
  {
    "key": "ctrl+down",
    "command": "-scrollLineDown",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+pagedown",
    "command": "scrollLineDown",
    "when": "textInputFocus"
  },
  // removedkey
  {
    "key": "ctrl+up",
    "command": "-scrollLineUp",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+pageup",
    "command": "scrollLineUp",
    "when": "textInputFocus"
  },
  // removedkey
  {
    "key": "alt+pagedown",
    "command": "-scrollPageDown",
    "when": "textInputFocus"
  },
  {
    "key": "meta+pagedown",
    "command": "scrollPageDown",
    "when": "textInputFocus"
  },
  // removedkey
  {
    "key": "alt+pageup",
    "command": "-scrollPageUp",
    "when": "textInputFocus"
  },
  {
    "key": "meta+pageup",
    "command": "scrollPageUp",
    "when": "textInputFocus"
  },
  {
    "key": "tab",
    "command": "tab",
    "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus"
  },
  {
    "key": "shift+down",
    "command": "cursorColumnSelectDown",
    "when": "editorColumnSelection && textInputFocus"
  },
  {
    "key": "shift+left",
    "command": "cursorColumnSelectLeft",
    "when": "editorColumnSelection && textInputFocus"
  },
  {
    "key": "shift+pagedown",
    "command": "cursorColumnSelectPageDown",
    "when": "editorColumnSelection && textInputFocus"
  },
  {
    "key": "shift+pageup",
    "command": "cursorColumnSelectPageUp",
    "when": "editorColumnSelection && textInputFocus"
  },
  {
    "key": "shift+right",
    "command": "cursorColumnSelectRight",
    "when": "editorColumnSelection && textInputFocus"
  },
  {
    "key": "shift+up",
    "command": "cursorColumnSelectUp",
    "when": "editorColumnSelection && textInputFocus"
  },
  {
    "key": "shift+escape",
    "command": "removeSecondaryCursors",
    "when": "editorHasMultipleSelections && textInputFocus"
  },
  {
    "key": "escape",
    "command": "removeSecondaryCursors",
    "when": "editorHasMultipleSelections && textInputFocus"
  },
  {
    "key": "f12",
    "command": "goToNextReference",
    "when": "inReferenceSearchEditor || referenceSearchVisible"
  },
  {
    "key": "f4",
    "command": "goToNextReference",
    "when": "inReferenceSearchEditor || referenceSearchVisible"
  },
  {
    "key": "shift+f12",
    "command": "goToPreviousReference",
    "when": "inReferenceSearchEditor || referenceSearchVisible"
  },
  {
    "key": "shift+f4",
    "command": "goToPreviousReference",
    "when": "inReferenceSearchEditor || referenceSearchVisible"
  },
  {
    "key": "shift+enter",
    "command": "refactorPreview.apply",
    "when": "refactorPreview.enabled && refactorPreview.hasCheckedChanges && focusedView == 'refactorPreview'"
  },
  {
    "key": "alt+enter",
    "command": "testing.editFocusedTest",
    "when": "focusedView == 'workbench.view.testing'"
  },
  {
    "key": "escape",
    "command": "notebook.cell.quitEdit",
    "when": "inputFocus && notebookEditorFocused && !editorHasMultipleSelections && !editorHasSelection && !editorHoverVisible"
  },
  // removedkey
  {
    "key": "meta+enter",
    "command": "-notebook.cell.quitEdit",
    "when": "inputFocus && notebookEditorFocused && notebookCellType == 'markup'"
  },
  {
    "key": "ctrl+enter",
    "command": "notebook.cell.quitEdit",
    "when": "inputFocus && notebookEditorFocused && notebookCellType == 'markup'"
  },
  {
    "key": "meta+e",
    "command": "actions.findWithSelection"
  },
  {
    "key": "enter",
    "command": "breakpointWidget.action.acceptInput",
    "when": "breakpointWidgetVisible && inBreakpointWidget"
  },
  {
    "key": "shift+escape",
    "command": "closeBreakpointWidget",
    "when": "breakpointWidgetVisible && textInputFocus"
  },
  {
    "key": "escape",
    "command": "closeBreakpointWidget",
    "when": "breakpointWidgetVisible && textInputFocus"
  },
  // revisit
  // removedkey
  {
    "key": "ctrl+u",
    "command": "cursorUndo",
    "when": "textInputFocus"
  },
  // addedkey
  {
    "key": "meta+u",
    "command": "cursorUndo",
    "when": "textInputFocus"
  },
  // removedkey
  {
    "key": "ctrl+right",
    "command": "-cursorWordEndRight",
    "when": "textInputFocus"
  },
  // addedkey
  {
    "key": "alt+right",
    "command": "cursorWordEndRight",
    "when": "textInputFocus"
  },
  // removedkey
  {
    "key": "ctrl+shift+right",
    "command": "-cursorWordEndRightSelect",
    "when": "textInputFocus"
  },
  // addedkey
  {
    "key": "shift+alt+right",
    "command": "cursorWordEndRightSelect",
    "when": "textInputFocus"
  },
  // removedkey
  {
    "key": "ctrl+left",
    "command": "-cursorWordLeft",
    "when": "textInputFocus"
  },
  // addedkey
  {
    "key": "alt+left",
    "command": "cursorWordLeft",
    "when": "textInputFocus"
  },
  // removedkey
  {
    "key": "ctrl+shift+left",
    "command": "-cursorWordLeftSelect",
    "when": "textInputFocus"
  },
  // addedkey
  {
    "key": "shift+alt+left",
    "command": "cursorWordLeftSelect",
    "when": "textInputFocus"
  },
  // removedkey
  {
    "key": "ctrl+backspace",
    "command": "-deleteWordLeft",
    "when": "textInputFocus && !editorReadonly"
  },
  // addedkey
  {
    "key": "meta+backspace",
    "command": "deleteWordLeft",
    "when": "textInputFocus && !editorReadonly"
  },
  // removedkey
  {
    "key": "ctrl+delete",
    "command": "-deleteWordRight",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "meta+delete",
    "command": "deleteWordRight",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+k",
    "command": "deleteAllRight",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "alt+backspace",
    "command": "deleteWordLeft",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+alt+backspace",
    "command": "deleteWordPartLeft",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+alt+delete",
    "command": "deleteWordPartRight",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "alt+delete",
    "command": "deleteWordRight",
    "when": "textInputFocus && !editorReadonly"
  },
  // unknownkey
  {
    "key": "shift+alt+[IntlBackslash]",
    "command": "editor.action.autoFix",
    "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)quickfix\\b/"
  },
  // removedkey
  {
    "key": "shift+alt+.",
    "command": "-editor.action.autoFix",
    "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)quickfix\\b/"
  },
  {
    "key": "alt+meta+.",
    "command": "editor.action.autoFix",
    "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)quickfix\\b/"
  },
  // removedkey
  {
    "key": "ctrl+shift+a",
    "command": "-editor.action.blockComment",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "shift+alt+a",
    "command": "editor.action.blockComment",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "escape",
    "command": "editor.action.cancelSelectionAnchor",
    "when": "editorTextFocus && selectionAnchorSet"
  },
  // removedkey
  {
    "key": "ctrl+f2",
    "command": "-editor.action.changeAll",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "meta+f2",
    "command": "editor.action.changeAll",
    "when": "editorTextFocus && !editorReadonly"
  },
  // removedkey
  {
    "key": "ctrl+c",
    "command": "-editor.action.clipboardCopyAction"
  },
  {
    "key": "meta+c",
    "command": "editor.action.clipboardCopyAction"
  },
  // removedkey
  {
    "key": "ctrl+x",
    "command": "-editor.action.clipboardCutAction"
  },
  {
    "key": "meta+x",
    "command": "editor.action.clipboardCutAction"
  },
  // removedkey
  {
    "key": "ctrl+v",
    "command": "-editor.action.clipboardPasteAction"
  },
  {
    "key": "meta+v",
    "command": "editor.action.clipboardPasteAction"
  },
  // removedkey
  {
    "key": "ctrl+/",
    "command": "editor.action.commentLine",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "meta+/",
    "command": "editor.action.commentLine",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+shift+alt+down",
    "command": "-editor.action.copyLinesDownAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "shift+alt+down",
    "command": "editor.action.copyLinesDownAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  // removedkey
  {
    "key": "ctrl+shift+alt+up",
    "command": "editor.action.copyLinesUpAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "shift+alt+up",
    "command": "editor.action.copyLinesUpAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "f7",
    "command": "editor.action.diffReview.next",
    "when": "isInDiffEditor"
  },
  {
    "key": "shift+f7",
    "command": "editor.action.diffReview.prev",
    "when": "isInDiffEditor"
  },
  {
    "key": "alt+f3",
    "command": "editor.action.dirtydiff.next",
    "when": "editorTextFocus && !textCompareEditorActive"
  },
  {
    "key": "shift+alt+f3",
    "command": "editor.action.dirtydiff.previous",
    "when": "editorTextFocus && !textCompareEditorActive"
  },
  {
    "key": "enter",
    "command": "editor.action.extensioneditor.findNext",
    "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'"
  },
  {
    "key": "shift+enter",
    "command": "editor.action.extensioneditor.findPrevious",
    "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'"
  },
  // unknownkey
  {
    "key": "ctrl+shift+i",
    "command": "-editor.action.formatDocument",
    "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor"
  },
  {
    "key": "shift+alt+f",
    "command": "editor.action.formatDocument",
    "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor"
  },
  // removedkey
  {
    "key": "ctrl+shift+i",
    "command": "-editor.action.formatDocument.none",
    "when": "editorTextFocus && !editorHasDocumentFormattingProvider && !editorReadonly"
  },
  {
    "key": "shift+alt+f",
    "command": "editor.action.formatDocument.none",
    "when": "editorTextFocus && !editorHasDocumentFormattingProvider && !editorReadonly"
  },
  // removedkey
  {
    "key": "ctrl+f12",
    "command": "-editor.action.goToImplementation",
    "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor"
  },
  {
    "key": "meta+f12",
    "command": "editor.action.goToImplementation",
    "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor"
  },
  {
    "key": "shift+f12",
    "command": "editor.action.goToReferences",
    "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
  },
  // unknownkey
  {
    "key": "ctrl+shift+[IntlBackslash]",
    "command": "editor.action.inPlaceReplace.down",
    "when": "editorTextFocus && !editorReadonly"
  },
  // removedkey
  {
    "key": "ctrl+shift+.",
    "command": "-editor.action.inPlaceReplace.down",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "shift+meta+.",
    "command": "editor.action.inPlaceReplace.down",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+[IntlBackslash]",
    "command": "editor.action.inPlaceReplace.up",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "escape",
    "command": "editor.action.inlineSuggest.hide",
    "when": "inlineSuggestionVisible"
  },
  // removedkey
  {
    "key": "ctrl+shift+up",
    "command": "-editor.action.insertCursorAbove",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+meta+up",
    "command": "editor.action.insertCursorAbove",
    "when": "editorTextFocus"
  },
  // removedkey
  {
    "key": "shift+alt+up",
    "command": "-editor.action.insertCursorAbove",
    "when": "editorTextFocus"
  },
  {
    "key": "shift+alt+i",
    "command": "editor.action.insertCursorAtEndOfEachLineSelected",
    "when": "editorTextFocus"
  },
  // removedkey
  {
    "key": "ctrl+shift+down",
    "command": "-editor.action.insertCursorBelow",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+meta+down",
    "command": "editor.action.insertCursorBelow",
    "when": "editorTextFocus"
  },
  // removedkey
  {
    "key": "shift+alt+down",
    "command": "-editor.action.insertCursorBelow",
    "when": "editorTextFocus"
  },
  // removedkey
  {
    "key": "ctrl+enter",
    "command": "-editor.action.insertLineAfter",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "meta+enter",
    "command": "editor.action.insertLineAfter",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+j",
    "command": "editor.action.joinLines",
    "when": "editorTextFocus && !editorReadonly"
  },
  // removedkey
  {
    "key": "ctrl+shift+f10",
    "command": "-editor.action.peekDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
  },
  // addedkey
  {
    "key": "alt+f12",
    "command": "editor.action.peekDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
  },
  {
    "key": "shift+alt+f9",
    "command": "editor.action.previousCommentThreadAction",
    "when": "editorFocus"
  },
  {
    "key": "shift+f3",
    "command": "editor.action.previousMatchFindAction",
    "when": "editorFocus"
  },
  {
    "key": "shift+meta+g",
    "command": "editor.action.previousMatchFindAction",
    "when": "editorFocus"
  },
  {
    "key": "shift+enter",
    "command": "editor.action.previousMatchFindAction",
    "when": "editorFocus && findInputFocussed"
  },
  // removedkey
  {
    "key": "ctrl+shift+f3",
    "command": "-editor.action.previousSelectionMatchFindAction",
    "when": "editorFocus"
  },
  {
    "key": "shift+meta+f3",
    "command": "editor.action.previousSelectionMatchFindAction",
    "when": "editorFocus"
  },
  // removedkey
  {
    "key": "ctrl+.",
    "command": "-editor.action.quickFix",
    "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
  },
  {
    "key": "meta+.",
    "command": "editor.action.quickFix",
    "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+shift+r",
    "command": "editor.action.refactor",
    "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
  },
  {
    "key": "f2",
    "command": "editor.action.rename",
    "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
  },
  {
    "key": "f12",
    "command": "editor.action.revealDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
  },
  // removedkey
  {
    "key": "ctrl+shift+l",
    "command": "-editor.action.selectHighlights",
    "when": "editorFocus"
  },
  {
    "key": "shift+meta+l",
    "command": "editor.action.selectHighlights",
    "when": "editorFocus"
  },
  {
    "key": "alt+f1",
    "command": "editor.action.showAccessibilityHelp"
  },
  // removedkey
  {
    "key": "shift+alt+f1",
    "command": "-editor.action.showAccessibilityHelp"
  },
  {
    "key": "shift+f10",
    "command": "editor.action.showContextMenu",
    "when": "textInputFocus"
  },
  // removedkey
  {
    "key": "shift+alt+right",
    "command": "-editor.action.smartSelect.expand",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+right",
    "command": "editor.action.smartSelect.expand",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+meta+right",
    "command": "editor.action.smartSelect.expand",
    "when": "editorTextFocus"
  },
  // removedkey
  {
    "key": "shift+alt+left",
    "command": "-editor.action.smartSelect.shrink",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+left",
    "command": "editor.action.smartSelect.shrink",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+meta+left",
    "command": "editor.action.smartSelect.shrink",
    "when": "editorTextFocus"
  },
  // removedkey
  {
    "key": "ctrl+h",
    "command": "-editor.action.startFindReplaceAction",
    "when": "editorFocus || editorIsOpen"
  },
  {
    "key": "alt+meta+f",
    "command": "editor.action.startFindReplaceAction",
    "when": "editorFocus || editorIsOpen"
  },
  // removedkey
  {
    "key": "ctrl+m",
    "command": "-editor.action.toggleTabFocusMode"
  },
  {
    "key": "ctrl+shift+m",
    "command": "editor.action.toggleTabFocusMode"
  },
  {
    "key": "alt+z",
    "command": "editor.action.toggleWordWrap"
  },
  {
    "key": "ctrl+t",
    "command": "editor.action.transposeLetters",
    "when": "textInputFocus && !editorReadonly"
  },
  // removedkey
  {
    "key": "ctrl+shift+space",
    "command": "-editor.action.triggerParameterHints",
    "when": "editorHasSignatureHelpProvider && editorTextFocus"
  },
  {
    "key": "shift+meta+space",
    "command": "editor.action.triggerParameterHints",
    "when": "editorHasSignatureHelpProvider && editorTextFocus"
  },
  // removedkey
  {
    "key": "ctrl+i",
    "command": "-editor.action.triggerSuggest",
    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
  },
  {
    "key": "meta+i",
    "command": "editor.action.triggerSuggest",
    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
  },
  {
    "key": "alt+escape",
    "command": "editor.action.triggerSuggest",
    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+space",
    "command": "editor.action.triggerSuggest",
    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
  },
  {
    "key": "enter",
    "command": "editor.action.webvieweditor.findNext",
    "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'"
  },
  {
    "key": "shift+enter",
    "command": "editor.action.webvieweditor.findPrevious",
    "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'"
  },
  {
    "key": "escape",
    "command": "editor.action.webvieweditor.hideFind",
    "when": "webviewFindWidgetVisible && !editorFocus && activeEditor == 'WebviewEditor'"
  },
  {
    "key": "f7",
    "command": "editor.action.wordHighlight.next",
    "when": "editorTextFocus && hasWordHighlights"
  },
  {
    "key": "shift+f7",
    "command": "editor.action.wordHighlight.prev",
    "when": "editorTextFocus && hasWordHighlights"
  },
  {
    "key": "escape",
    "command": "editor.cancelOperation",
    "when": "cancellableOperation"
  },
  {
    "key": "escape",
    "command": "editor.debug.action.closeExceptionWidget",
    "when": "exceptionWidgetVisible"
  },
  {
    "key": "f9",
    "command": "editor.debug.action.toggleBreakpoint",
    "when": "debuggersAvailable && editorTextFocus"
  },
  {
    "key": "tab",
    "command": "editor.emmet.action.expandAbbreviation",
    "when": "config.emmet.triggerExpansionOnTab && editorTextFocus && !editorReadonly && !editorTabMovesFocus"
  },
  // removedkey
  {
    "key": "ctrl+shift+[",
    "command": "-editor.fold",
    "when": "editorTextFocus && foldingEnabled"
  },
  // addedkey
  {
    "key": "alt+meta+[",
    "command": "editor.fold",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "f12",
    "command": "editor.gotoNextSymbolFromResult",
    "when": "hasSymbols"
  },
  {
    "key": "escape",
    "command": "editor.gotoNextSymbolFromResult.cancel",
    "when": "hasSymbols"
  },
  // removedkey
  {
    "key": "ctrl+shift+]",
    "command": "-editor.unfold",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "shift+meta+]",
    "command": "editor.unfold",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "escape",
    "command": "inlayHints.stopReadingLineWithHint",
    "when": "isReadingLineWithInlayHints"
  },
  {
    "key": "tab",
    "command": "insertSnippet",
    "when": "editorTextFocus && hasSnippetCompletions && !editorTabMovesFocus && !inSnippetMode"
  },
  {
    "key": "pagedown",
    "command": "notebook.cell.cursorPageDown",
    "when": "editorTextFocus && inputFocus && notebookEditorFocused"
  },
  {
    "key": "shift+pagedown",
    "command": "notebook.cell.cursorPageDownSelect",
    "when": "editorTextFocus && inputFocus && notebookEditorFocused"
  },
  {
    "key": "pageup",
    "command": "notebook.cell.cursorPageUp",
    "when": "editorTextFocus && inputFocus && notebookEditorFocused"
  },
  {
    "key": "shift+pageup",
    "command": "notebook.cell.cursorPageUpSelect",
    "when": "editorTextFocus && inputFocus && notebookEditorFocused"
  },
  {
    "key": "alt+enter",
    "command": "notebook.cell.executeAndInsertBelow",
    "when": "notebookCellListFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0"
  },
  {
    "key": "shift+enter",
    "command": "notebook.cell.executeAndSelectBelow",
    "when": "notebookCellListFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0"
  },
  // removedkey
  {
    "key": "ctrl+shift+v",
    "command": "-notebook.cell.pasteAbove",
    "when": "notebookEditorFocused && !inputFocus"
  },
  {
    "key": "shift+meta+v",
    "command": "notebook.cell.pasteAbove",
    "when": "notebookEditorFocused && !inputFocus"
  },
  {
    "key": "down",
    "command": "notebook.focusNextEditor",
    "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'"
  },
  {
    "key": "up",
    "command": "notebook.focusPreviousEditor",
    "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'"
  },
  // removedkey
  {
    "key": "ctrl+shift+i",
    "command": "notebook.formatCell",
    "when": "editorHasDocumentFormattingProvider && editorTextFocus && inCompositeEditor && notebookEditable && !editorReadonly && activeEditor == 'workbench.editor.notebook'"
  },
  {
    "key": "shift+alt+f",
    "command": "notebook.formatCell",
    "when": "editorHasDocumentFormattingProvider && editorTextFocus && inCompositeEditor && notebookEditable && !editorReadonly && activeEditor == 'workbench.editor.notebook'"
  },
  {
    "key": "ctrl+enter",
    "command": "openReferenceToSide",
    "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand"
  },
  {
    "key": "enter",
    "command": "repl.action.acceptInput",
    "when": "inDebugRepl && textInputFocus"
  },
  // removedkey
  {
    "key": "ctrl+shift+r",
    "command": "-rerunSearchEditorSearch",
    "when": "inSearchEditor"
  },
  {
    "key": "shift+meta+r",
    "command": "rerunSearchEditorSearch",
    "when": "inSearchEditor"
  },
  {
    "key": "escape",
    "command": "search.action.focusQueryEditorWidget",
    "when": "inSearchEditor"
  },
  // removedkey
  {
    "key": "ctrl+shift+backspace",
    "command": "-search.searchEditor.action.deleteFileResults",
    "when": "inSearchEditor"
  },
  {
    "key": "shift+meta+backspace",
    "command": "search.searchEditor.action.deleteFileResults",
    "when": "inSearchEditor"
  },
  {
    "key": "escape",
    "command": "settings.action.clearSearchResults",
    "when": "inSettingsEditor && inSettingsSearch"
  },
  {
    "key": "down",
    "command": "settings.action.focusSettingsFile",
    "when": "inSettingsSearch && !suggestWidgetVisible"
  },
  // removedkey
  {
    "key": "ctrl+/",
    "command": "-toggleExplainMode",
    "when": "suggestWidgetVisible"
  },
  {
    "key": "meta+/",
    "command": "toggleExplainMode",
    "when": "suggestWidgetVisible"
  },
  {
    "key": "escape",
    "command": "welcome.goBack",
    "when": "inWelcome && activeEditor == 'gettingStartedPage'"
  },
  {
    "key": "alt+f5",
    "command": "workbench.action.editor.nextChange",
    "when": "editorTextFocus && !textCompareEditorActive"
  },
  {
    "key": "shift+alt+f5",
    "command": "workbench.action.editor.previousChange",
    "when": "editorTextFocus && !textCompareEditorActive"
  },
  {
    "key": "shift+escape",
    "command": "workbench.action.hideComment",
    "when": "commentEditorFocused"
  },
  {
    "key": "escape",
    "command": "workbench.action.hideComment",
    "when": "commentEditorFocused"
  },
  {
    "key": "alt+f8",
    "command": "testing.goToNextMessage",
    "when": "editorFocus && testing.isPeekVisible"
  },
  {
    "key": "shift+alt+f8",
    "command": "testing.goToPreviousMessage",
    "when": "editorFocus && testing.isPeekVisible"
  },
  {
    "key": "shift+escape",
    "command": "closeFindWidget",
    "when": "editorFocus && findWidgetVisible && !isComposing"
  },
  {
    "key": "escape",
    "command": "closeFindWidget",
    "when": "editorFocus && findWidgetVisible && !isComposing"
  },
  // removedkey
  {
    "key": "ctrl+alt+enter",
    "command": "-editor.action.replaceAll",
    "when": "editorFocus && findWidgetVisible"
  },
  {
    "key": "alt+meta+enter",
    "command": "editor.action.replaceAll",
    "when": "editorFocus && findWidgetVisible"
  },
  {
    "key": "meta+enter",
    "command": "editor.action.replaceAll",
    "when": "editorFocus && findWidgetVisible && replaceInputFocussed"
  },
  // removedkey
  {
    "key": "ctrl+shift+1",
    "command": "-editor.action.replaceOne",
    "when": "editorFocus && findWidgetVisible"
  },
  {
    "key": "shift+meta+1",
    "command": "editor.action.replaceOne",
    "when": "editorFocus && findWidgetVisible"
  },
  {
    "key": "enter",
    "command": "editor.action.replaceOne",
    "when": "editorFocus && findWidgetVisible && replaceInputFocussed"
  },
  {
    "key": "alt+enter",
    "command": "editor.action.selectAllMatches",
    "when": "editorFocus && findWidgetVisible"
  },
  {
    "key": "tab",
    "command": "jumpToNextSnippetPlaceholder",
    "when": "editorTextFocus && hasNextTabstop && inSnippetMode"
  },
  {
    "key": "shift+tab",
    "command": "jumpToPrevSnippetPlaceholder",
    "when": "editorTextFocus && hasPrevTabstop && inSnippetMode"
  },
  {
    "key": "escape",
    "command": "leaveEditorMessage",
    "when": "messageVisible"
  },
  {
    "key": "shift+escape",
    "command": "leaveSnippet",
    "when": "editorTextFocus && inSnippetMode"
  },
  {
    "key": "escape",
    "command": "leaveSnippet",
    "when": "editorTextFocus && inSnippetMode"
  },
  {
    "key": "shift+escape",
    "command": "closeDirtyDiff",
    "when": "dirtyDiffVisible"
  },
  {
    "key": "escape",
    "command": "closeDirtyDiff",
    "when": "dirtyDiffVisible"
  },
  {
    "key": "shift+escape",
    "command": "closeMarkersNavigation",
    "when": "editorFocus && markersNavigationVisible"
  },
  {
    "key": "escape",
    "command": "closeMarkersNavigation",
    "when": "editorFocus && markersNavigationVisible"
  },
  {
    "key": "escape",
    "command": "notifications.hideToasts",
    "when": "notificationToastsVisible"
  },
  {
    "key": "shift+escape",
    "command": "closeParameterHints",
    "when": "editorFocus && parameterHintsVisible"
  },
  {
    "key": "escape",
    "command": "closeParameterHints",
    "when": "editorFocus && parameterHintsVisible"
  },
  {
    "key": "ctrl+n",
    "command": "showNextParameterHint",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  {
    "key": "alt+down",
    "command": "showNextParameterHint",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  {
    "key": "down",
    "command": "showNextParameterHint",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  {
    "key": "ctrl+p",
    "command": "showPrevParameterHint",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  {
    "key": "alt+up",
    "command": "showPrevParameterHint",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  {
    "key": "up",
    "command": "showPrevParameterHint",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  {
    "key": "shift+tab",
    "command": "acceptAlternativeSelectedSuggestion",
    "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "shift+enter",
    "command": "acceptAlternativeSelectedSuggestion",
    "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "tab",
    "command": "acceptSelectedSuggestion",
    "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "enter",
    "command": "acceptSelectedSuggestion",
    "when": "acceptSuggestionOnEnter && suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus"
  },
  // removedkey
  {
    "key": "ctrl+i",
    "command": "-focusSuggestion",
    "when": "suggestWidgetVisible && textInputFocus && !config.editor.suggest.selectQuickSuggestions && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "meta+i",
    "command": "focusSuggestion",
    "when": "suggestWidgetVisible && textInputFocus && !config.editor.suggest.selectQuickSuggestions && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "ctrl+space",
    "command": "focusSuggestion",
    "when": "suggestWidgetVisible && textInputFocus && !config.editor.suggest.selectQuickSuggestions && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "shift+escape",
    "command": "hideSuggestWidget",
    "when": "suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "escape",
    "command": "hideSuggestWidget",
    "when": "suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "tab",
    "command": "insertBestCompletion",
    "when": "atEndOfWord && textInputFocus && !hasOtherSuggestions && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
  },
  {
    "key": "tab",
    "command": "insertNextSuggestion",
    "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
  },
  {
    "key": "shift+tab",
    "command": "insertPrevSuggestion",
    "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
  },
  // removedkey
  {
    "key": "ctrl+pagedown",
    "command": "-selectNextPageSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "meta+pagedown",
    "command": "selectNextPageSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "pagedown",
    "command": "selectNextPageSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+n",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  // removedkey
  {
    "key": "ctrl+down",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "meta+down",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "down",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  // removedkey
  {
    "key": "ctrl+pageup",
    "command": "selectPrevPageSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "meta+pageup",
    "command": "selectPrevPageSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "pageup",
    "command": "selectPrevPageSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+up",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "up",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  // removedkey
  {
    "key": "ctrl+i",
    "command": "-toggleSuggestionDetails",
    "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "meta+i",
    "command": "toggleSuggestionDetails",
    "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+space",
    "command": "toggleSuggestionDetails",
    "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+alt+space",
    "command": "toggleSuggestionFocus",
    "when": "suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "enter",
    "command": "acceptRenameInput",
    "when": "editorFocus && renameInputVisible"
  },
  {
    "key": "shift+enter",
    "command": "acceptRenameInputWithPreview",
    "when": "config.editor.rename.enablePreview && editorFocus && renameInputVisible"
  },
  {
    "key": "shift+escape",
    "command": "cancelLinkedEditingInput",
    "when": "LinkedEditingInputVisible && editorTextFocus"
  },
  {
    "key": "escape",
    "command": "cancelLinkedEditingInput",
    "when": "LinkedEditingInputVisible && editorTextFocus"
  },
  {
    "key": "shift+escape",
    "command": "cancelRenameInput",
    "when": "editorFocus && renameInputVisible"
  },
  {
    "key": "escape",
    "command": "cancelRenameInput",
    "when": "editorFocus && renameInputVisible"
  },
  // removedkey
  {
    "key": "ctrl+shift+l",
    "command": "-addCursorsAtSearchResults",
    "when": "fileMatchOrMatchFocus && searchViewletVisible"
  },
  {
    "key": "shift+meta+l",
    "command": "addCursorsAtSearchResults",
    "when": "fileMatchOrMatchFocus && searchViewletVisible"
  },
  // removedkey
  {
    "key": "ctrl+shift+;",
    "command": "-breadcrumbs.focus",
    "when": "breadcrumbsPossible && breadcrumbsVisible"
  },
  {
    "key": "shift+meta+;",
    "command": "breadcrumbs.focus",
    "when": "breadcrumbsPossible && breadcrumbsVisible"
  },
  // unknownkey
  {
    "key": "ctrl+shift+[IntlBackslash]",
    "command": "breadcrumbs.focusAndSelect",
    "when": "breadcrumbsPossible && breadcrumbsVisible"
  },
  // removedkey
  {
    "key": "ctrl+shift+.",
    "command": "-breadcrumbs.focusAndSelect",
    "when": "breadcrumbsPossible && breadcrumbsVisible"
  },
  {
    "key": "shift+meta+.",
    "command": "breadcrumbs.focusAndSelect",
    "when": "breadcrumbsPossible && breadcrumbsVisible"
  },
  // removedkey
  {
    "key": "ctrl+right",
    "command": "-breadcrumbs.focusNext",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "alt+right",
    "command": "breadcrumbs.focusNext",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "right",
    "command": "breadcrumbs.focusNext",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  // removedkey
  {
    "key": "ctrl+left",
    "command": "-breadcrumbs.focusPrevious",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "alt+left",
    "command": "breadcrumbs.focusPrevious",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "left",
    "command": "breadcrumbs.focusPrevious",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  // removedkey
  {
    "key": "ctrl+enter",
    "command": "-breadcrumbs.revealFocused",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "meta+enter",
    "command": "breadcrumbs.revealFocused",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "space",
    "command": "breadcrumbs.revealFocused",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  // removedkey
  {
    "key": "ctrl+enter",
    "command": "-breadcrumbs.revealFocusedFromTreeAside",
    "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"
  },
  {
    "key": "meta+enter",
    "command": "breadcrumbs.revealFocusedFromTreeAside",
    "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"
  },
  {
    "key": "down",
    "command": "breadcrumbs.selectFocused",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "enter",
    "command": "breadcrumbs.selectFocused",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  // unknownkey
  {
    "key": "ctrl+shift+[IntlBackslash]",
    "command": "breadcrumbs.toggleToOn",
    "when": "!config.breadcrumbs.enabled"
  },
  // removedkey
  {
    "key": "ctrl+shift+.",
    "command": "-breadcrumbs.toggleToOn",
    "when": "!config.breadcrumbs.enabled"
  },
  {
    "key": "shift+meta+.",
    "command": "breadcrumbs.toggleToOn",
    "when": "!config.breadcrumbs.enabled"
  },
  {
    "key": "shift+escape",
    "command": "closeAccessibilityHelp",
    "when": "accessibilityHelpWidgetVisible && editorFocus"
  },
  {
    "key": "escape",
    "command": "closeAccessibilityHelp",
    "when": "accessibilityHelpWidgetVisible && editorFocus"
  },
  {
    "key": "escape",
    "command": "closeReplaceInFilesWidget",
    "when": "replaceInputBoxFocus && searchViewletVisible"
  },
  {
    "key": "escape",
    "command": "commentsClearFilterText",
    "when": "commentsFilterFocus"
  },
  // removedkey
  {
    "key": "ctrl+f",
    "command": "-commentsFocusFilter",
    "when": "focusedView == 'workbench.panel.comments'"
  },
  {
    "key": "meta+f",
    "command": "commentsFocusFilter",
    "when": "focusedView == 'workbench.panel.comments'"
  },
  // removedkey
  {
    "key": "ctrl+down",
    "command": "-commentsFocusViewFromFilter",
    "when": "commentsFilterFocus"
  },
  {
    "key": "meta+down",
    "command": "commentsFocusViewFromFilter",
    "when": "commentsFilterFocus"
  },
  // removedkey
  {
    "key": "ctrl+alt+c",
    "command": "-copyFilePath",
    "when": "!editorFocus"
  },
  {
    "key": "alt+meta+c",
    "command": "copyFilePath",
    "when": "!editorFocus"
  },
  // removedkey
  {
    "key": "ctrl+shift+alt+c",
    "command": "-copyRelativeFilePath",
    "when": "!editorFocus"
  },
  {
    "key": "shift+alt+meta+c",
    "command": "copyRelativeFilePath",
    "when": "!editorFocus"
  },
  {
    "key": "alt+enter",
    "command": "debug.openBreakpointToSide",
    "when": "breakpointsFocused"
  },
  // removedkey
  {
    "key": "ctrl+enter",
    "command": "-debug.openBreakpointToSide",
    "when": "breakpointsFocused"
  },
  {
    "key": "meta+enter",
    "command": "debug.openBreakpointToSide",
    "when": "breakpointsFocused"
  },
  // removedkey
  {
    "key": "ctrl+f5",
    "command": "-debug.openView",
    "when": "!debuggersAvailable"
  },
  {
    "key": "meta+f5",
    "command": "debug.openView",
    "when": "!debuggersAvailable"
  },
  {
    "key": "f5",
    "command": "debug.openView",
    "when": "!debuggersAvailable"
  },
  // removedkey
  {
    "key": "delete",
    "command": "-debug.removeBreakpoint",
    "when": "breakpointsFocused && !breakpointInputFocused"
  },
  {
    "key": "meta+backspace",
    "command": "debug.removeBreakpoint",
    "when": "breakpointsFocused && !breakpointInputFocused"
  },
  // removedkey
  {
    "key": "delete",
    "command": "-debug.removeWatchExpression",
    "when": "watchExpressionsFocused && !expressionSelected"
  },
  {
    "key": "meta+backspace",
    "command": "debug.removeWatchExpression",
    "when": "watchExpressionsFocused && !expressionSelected"
  },
  {
    "key": "alt+-",
    "command": "decreaseSearchEditorContextLines",
    "when": "inSearchEditor"
  },
  {
    "key": "tab",
    "command": "editor.action.inlineSuggest.commit",
    "when": "inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorTabMovesFocus"
  },
  {
    "key": "shift+f9",
    "command": "editor.debug.action.toggleInlineBreakpoint",
    "when": "editorTextFocus"
  },
  {
    "key": "shift+alt+d",
    "command": "editor.detectLanguage",
    "when": "editorTextFocus && !notebookEditable"
  },
  {
    "key": "shift+enter",
    "command": "editor.refocusCallHierarchy",
    "when": "callHierarchyVisible"
  },
  {
    "key": "shift+enter",
    "command": "editor.refocusTypeHierarchy",
    "when": "typeHierarchyVisible"
  },
  {
    "key": "shift+alt+h",
    "command": "editor.showCallHierarchy",
    "when": "editorHasCallHierarchyProvider && editorTextFocus && !inReferenceSearchEditor"
  },
  {
    "key": "shift+alt+h",
    "command": "editor.showIncomingCalls",
    "when": "callHierarchyVisible && callHierarchyDirection == 'outgoingCalls'"
  },
  {
    "key": "shift+alt+h",
    "command": "editor.showOutgoingCalls",
    "when": "callHierarchyVisible && callHierarchyDirection == 'incomingCalls'"
  },
  {
    "key": "shift+alt+h",
    "command": "editor.showSubtypes",
    "when": "typeHierarchyVisible && typeHierarchyDirection == 'supertypes'"
  },
  {
    "key": "shift+alt+h",
    "command": "editor.showSupertypes",
    "when": "typeHierarchyVisible && typeHierarchyDirection == 'subtypes'"
  },
  {
    "key": "ctrl+enter",
    "command": "explorer.openToSide",
    "when": "explorerViewletFocus && explorerViewletVisible && !inputFocus"
  },
  {
    "key": "shift+alt+f",
    "command": "filesExplorer.findInFolder",
    "when": "explorerResourceIsFolder && explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },
  {
    "key": "alt+down",
    "command": "history.showNext",
    "when": "historyNavigationForwardsEnabled && historyNavigationWidgetFocus && !suggestWidgetVisible"
  },
  {
    "key": "down",
    "command": "history.showNext",
    "when": "historyNavigationForwardsEnabled && historyNavigationWidgetFocus && !suggestWidgetVisible"
  },
  {
    "key": "alt+up",
    "command": "history.showPrevious",
    "when": "historyNavigationBackwardsEnabled && historyNavigationWidgetFocus && !suggestWidgetVisible"
  },
  {
    "key": "up",
    "command": "history.showPrevious",
    "when": "historyNavigationBackwardsEnabled && historyNavigationWidgetFocus && !suggestWidgetVisible"
  },
  {
    "key": "alt+=",
    "command": "increaseSearchEditorContextLines",
    "when": "inSearchEditor"
  },
  {
    "key": "down",
    "command": "interactive.history.next",
    "when": "!suggestWidgetVisible && resourceScheme == 'vscode-interactive' && interactiveInputCursorAtBoundary != 'none' && interactiveInputCursorAtBoundary != 'top'"
  },
  {
    "key": "up",
    "command": "interactive.history.previous",
    "when": "!suggestWidgetVisible && resourceScheme == 'vscode-interactive' && interactiveInputCursorAtBoundary != 'bottom' && interactiveInputCursorAtBoundary != 'none'"
  },
  // removedkey
  {
    "key": "ctrl+end",
    "command": "-interactive.scrollToBottom",
    "when": "resourceScheme == 'vscode-interactive'"
  },
  {
    "key": "meta+down",
    "command": "interactive.scrollToBottom",
    "when": "resourceScheme == 'vscode-interactive'"
  },
  // removedkey
  {
    "key": "ctrl+home",
    "command": "-interactive.scrollToTop",
    "when": "resourceScheme == 'vscode-interactive'"
  },
  {
    "key": "meta+up",
    "command": "interactive.scrollToTop",
    "when": "resourceScheme == 'vscode-interactive'"
  },
  {
    "key": "escape",
    "command": "keybindings.editor.clearSearchResults",
    "when": "inKeybindings && inKeybindingsSearch"
  },
  // removedkey
  {
    "key": "ctrl+c",
    "command": "-keybindings.editor.copyKeybindingEntry",
    "when": "inKeybindings && keybindingFocus && !whenFocus"
  },
  {
    "key": "meta+c",
    "command": "keybindings.editor.copyKeybindingEntry",
    "when": "inKeybindings && keybindingFocus && !whenFocus"
  },
  {
    "key": "enter",
    "command": "keybindings.editor.defineKeybinding",
    "when": "inKeybindings && keybindingFocus"
  },
  // removedkey
  {
    "key": "ctrl+down",
    "command": "-keybindings.editor.focusKeybindings",
    "when": "inKeybindings && inKeybindingsSearch"
  },
  {
    "key": "meta+down",
    "command": "keybindings.editor.focusKeybindings",
    "when": "inKeybindings && inKeybindingsSearch"
  },
  // removedkey
  {
    "key": "alt+k",
    "command": "-keybindings.editor.recordSearchKeys",
    "when": "inKeybindings && inKeybindingsSearch"
  },
  {
    "key": "alt+meta+k",
    "command": "keybindings.editor.recordSearchKeys",
    "when": "inKeybindings && inKeybindingsSearch"
  },
  // removedkey
  {
    "key": "delete",
    "command": "-keybindings.editor.removeKeybinding",
    "when": "inKeybindings && keybindingFocus && !inputFocus"
  },
  {
    "key": "meta+backspace",
    "command": "keybindings.editor.removeKeybinding",
    "when": "inKeybindings && keybindingFocus && !inputFocus"
  },
  // removedkey
  {
    "key": "ctrl+f",
    "command": "-keybindings.editor.searchKeybindings",
    "when": "inKeybindings"
  },
  {
    "key": "meta+f",
    "command": "keybindings.editor.searchKeybindings",
    "when": "inKeybindings"
  },
  // removedkey
  {
    "key": "alt+p",
    "command": "-keybindings.editor.toggleSortByPrecedence",
    "when": "inKeybindings"
  },
  {
    "key": "alt+meta+p",
    "command": "keybindings.editor.toggleSortByPrecedence",
    "when": "inKeybindings"
  },
  {
    "key": "escape",
    "command": "list.clear",
    "when": "listFocus && listHasSelectionOrFocus && !inputFocus"
  },
  {
    "key": "escape",
    "command": "list.closeFind",
    "when": "listFocus && treeFindOpen"
  },
  {
    "key": "meta+up",
    "command": "list.collapse",
    "when": "listFocus && treeElementCanCollapse && !inputFocus || listFocus && treeElementHasParent && !inputFocus"
  },
  {
    "key": "left",
    "command": "list.collapse",
    "when": "listFocus && treeElementCanCollapse && !inputFocus || listFocus && treeElementHasParent && !inputFocus"
  },
  {
    "key": "shift+meta+left",
    "command": "list.collapseAll",
    "when": "listFocus && !inputFocus"
  },
  // removedkey
  {
    "key": "ctrl+left",
    "command": "-list.collapseAll",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "meta+left",
    "command": "list.collapseAll",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "right",
    "command": "list.expand",
    "when": "listFocus && treeElementCanExpand && !inputFocus || listFocus && treeElementHasChild && !inputFocus"
  },
  {
    "key": "shift+down",
    "command": "list.expandSelectionDown",
    "when": "listFocus && listSupportsMultiselect && !inputFocus"
  },
  {
    "key": "shift+up",
    "command": "list.expandSelectionUp",
    "when": "listFocus && listSupportsMultiselect && !inputFocus"
  },
  {
    "key": "f3",
    "command": "list.find",
    "when": "listFocus && listSupportsFind"
  },
  {
    "key": "ctrl+n",
    "command": "list.focusDown",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "down",
    "command": "list.focusDown",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "home",
    "command": "list.focusFirst",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "end",
    "command": "list.focusLast",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "pagedown",
    "command": "list.focusPageDown",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "pageup",
    "command": "list.focusPageUp",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+p",
    "command": "list.focusUp",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "up",
    "command": "list.focusUp",
    "when": "listFocus && !inputFocus"
  },
  // removedkey
  {
    "key": "ctrl+down",
    "command": "-list.scrollDown",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "meta+down",
    "command": "list.scrollDown",
    "when": "listFocus && !inputFocus"
  },
  // removedkey
  {
    "key": "ctrl+up",
    "command": "-list.scrollUp",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "meta+up",
    "command": "list.scrollUp",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "meta+down",
    "command": "list.select",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "enter",
    "command": "list.select",
    "when": "listFocus && !inputFocus"
  },
  // removedkey
  {
    "key": "ctrl+a",
    "command": "-list.selectAll",
    "when": "listFocus && listSupportsMultiselect && !inputFocus"
  },
  {
    "key": "meta+a",
    "command": "list.selectAll",
    "when": "listFocus && listSupportsMultiselect && !inputFocus"
  },
  {
    "key": "space",
    "command": "list.toggleExpand",
    "when": "listFocus && !inputFocus"
  },
  // removedkey
  {
    "key": "ctrl+shift+enter",
    "command": "-list.toggleSelection",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "shif+meta+enter",
    "command": "list.toggleSelection",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "y",
    "command": "notebook.cell.changeToCode",
    "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'markup'"
  },
  {
    "key": "m",
    "command": "notebook.cell.changeToMarkdown",
    "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'code'"
  },
  {
    "key": "alt+delete",
    "command": "notebook.cell.clearOutputs",
    "when": "notebookCellEditable && notebookCellHasOutputs && notebookEditable && notebookEditorFocused && !inputFocus"
  },
  {
    "key": "shift+alt+down",
    "command": "notebook.cell.copyDown",
    "when": "notebookEditorFocused && !inputFocus"
  },
  {
    "key": "shift+alt+up",
    "command": "notebook.cell.copyUp",
    "when": "notebookEditorFocused && !inputFocus"
  },
  {
    "key": "delete",
    "command": "-notebook.cell.delete",
    "when": "notebookEditorFocused && !inputFocus"
  },
  {
    "key": "meta+backspace",
    "command": "notebook.cell.delete",
    "when": "notebookEditorFocused && !inputFocus"
  },
  {
    "key": "shift+alt+d",
    "command": "notebook.cell.detectLanguage",
    "when": "notebookCellEditable && notebookEditable"
  },
  {
    "key": "enter",
    "command": "notebook.cell.edit",
    "when": "notebookCellListFocused && notebookEditable && !inputFocus"
  },
  // removedkey
  {
    "key": "ctrl+down",
    "command": "-notebook.cell.focusInOutput",
    "when": "notebookCellHasOutputs && notebookEditorFocused"
  },
  {
    "key": "ctrl+meta+down",
    "command": "notebook.cell.focusInOutput",
    "when": "notebookCellHasOutputs && notebookEditorFocused"
  },
  // removedkey
  {
    "key": "ctrl+up",
    "command": "-notebook.cell.focusOutOutput",
    "when": "notebookEditorFocused"
  },
  {
    "key": "ctrl+meta+up",
    "command": "notebook.cell.focusOutOutput",
    "when": "notebookEditorFocused"
  },
  // removedkey
  {
    "key": "ctrl+shift+enter",
    "command": "-notebook.cell.insertCodeCellAbove",
    "when": "notebookCellListFocused && !inputFocus"
  },
  {
    "key": "shift+meta+enter",
    "command": "notebook.cell.insertCodeCellAbove",
    "when": "notebookCellListFocused && !inputFocus"
  },
  // removedkey
  {
    "key": "ctrl+enter",
    "command": "-notebook.cell.insertCodeCellBelow",
    "when": "notebookCellListFocused && !inputFocus"
  },
  {
    "key": "meta+enter",
    "command": "notebook.cell.insertCodeCellBelow",
    "when": "notebookCellListFocused && !inputFocus"
  },
  // removedkey
  {
    "key": "shift+alt+meta+j",
    "command": "-notebook.cell.joinAbove",
    "when": "notebookEditorFocused"
  },
  {
    "key": "ctrl+shift+alt+j",
    "command": "notebook.cell.joinAbove",
    "when": "notebookEditorFocused"
  },
  // removedkey
  {
    "key": "alt+meta+j",
    "command": "-notebook.cell.joinBelow",
    "when": "notebookEditorFocused"
  },
  {
    "key": "ctrl+alt+j",
    "command": "notebook.cell.joinBelow",
    "when": "notebookEditorFocused"
  },
  {
    "key": "alt+down",
    "command": "notebook.cell.moveDown",
    "when": "notebookEditorFocused && !inputFocus"
  },
  {
    "key": "alt+up",
    "command": "notebook.cell.moveUp",
    "when": "notebookEditorFocused && !inputFocus"
  },
  // removedkey
  {
    "key": "ctrl+l",
    "command": "-notebook.centerActiveCell",
    "when": "notebookEditorFocused"
  },
  {
    "key": "meta+l",
    "command": "notebook.centerActiveCell",
    "when": "notebookEditorFocused"
  },
  // removedkey
  {
    "key": "ctrl+end",
    "command": "-notebook.focusBottom",
    "when": "notebookEditorFocused && !inputFocus"
  },
  {
    "key": "cmd+down",
    "command": "notebook.focusBottom",
    "when": "notebookEditorFocused && !inputFocus"
  },
  {
    "key": "down",
    "command": "notebook.focusNextEditor",
    "when": "config.notebook.navigation.allowNavigateToSurroundingCells && notebookCursorNavigationMode && notebookEditorFocused && !notebookCellMarkdownEditMode && notebookCellType == 'markup'"
  },
  // removedkey
  {
    "key": "ctrl+down",
    "command": "-notebook.focusNextEditor",
    "when": "notebookEditorFocused && notebookOutputFocused"
  },
  {
    "key": "ctrl+meta+down",
    "command": "notebook.focusNextEditor",
    "when": "notebookEditorFocused && notebookOutputFocused"
  },
  {
    "key": "up",
    "command": "notebook.focusPreviousEditor",
    "when": "config.notebook.navigation.allowNavigateToSurroundingCells && notebookCursorNavigationMode && notebookEditorFocused && !notebookCellMarkdownEditMode && notebookCellType == 'markup'"
  },
  // removedkey
  {
    "key": "ctrl+home",
    "command": "-notebook.focusTop",
    "when": "notebookEditorFocused && !inputFocus"
  },
  {
    "key": "meta+up",
    "command": "notebook.focusTop",
    "when": "notebookEditorFocused && !inputFocus"
  },
  {
    "key": "left",
    "command": "notebook.fold",
    "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
  },
  // removedkey
  {
    "key": "ctrl+shift+[",
    "command": "-notebook.fold",
    "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
  },
  {
    "key": "alt+meta+[",
    "command": "notebook.fold",
    "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
  },
  // removedkey
  {
    "key": "ctrl+shift+i",
    "command": "-notebook.format",
    "when": "notebookEditable && !editorTextFocus && activeEditor == 'workbench.editor.notebook'"
  },
  {
    "key": "shift+alt+f",
    "command": "notebook.format",
    "when": "notebookEditable && !editorTextFocus && activeEditor == 'workbench.editor.notebook'"
  },
  {
    "key": "escape",
    "command": "notebook.hideFind",
    "when": "notebookEditorFocused && notebookFindWidgetFocused"
  },
  {
    "key": "right",
    "command": "notebook.unfold",
    "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
  },
  // removedkey
  {
    "key": "ctrl+shift+]",
    "command": "-notebook.unfold",
    "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
  },
  {
    "key": "alt+meta+]",
    "command": "notebook.unfold",
    "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
  },
  // removedkey
  {
    "key": "delete",
    "command": "-notification.clear",
    "when": "notificationFocus"
  },
  {
    "key": "cmd+backspace",
    "command": "notification.clear",
    "when": "notificationFocus"
  },
  {
    "key": "left",
    "command": "notification.collapse",
    "when": "notificationFocus"
  },
  {
    "key": "right",
    "command": "notification.expand",
    "when": "notificationFocus"
  },
  {
    "key": "enter",
    "command": "notification.toggle",
    "when": "notificationFocus"
  },
  {
    "key": "space",
    "command": "notification.toggle",
    "when": "notificationFocus"
  },
  {
    "key": "home",
    "command": "notifications.focusFirstToast",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "key": "pageup",
    "command": "notifications.focusFirstToast",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "key": "end",
    "command": "notifications.focusLastToast",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "key": "pagedown",
    "command": "notifications.focusLastToast",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "key": "down",
    "command": "notifications.focusNextToast",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "key": "up",
    "command": "notifications.focusPreviousToast",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "key": "escape",
    "command": "problems.action.clearFilterText",
    "when": "problemsFilterFocus"
  },
  // removedkey
  {
    "key": "ctrl+c",
    "command": "-problems.action.copy",
    "when": "problemsVisibility && !relatedInformationFocus && focusedView == 'workbench.panel.markers.view'"
  },
  {
    "key": "meta+c",
    "command": "problems.action.copy",
    "when": "problemsVisibility && !relatedInformationFocus && focusedView == 'workbench.panel.markers.view'"
  },
  // removedkey
  {
    "key": "ctrl+down",
    "command": "-problems.action.focusProblemsFromFilter",
    "when": "problemsFilterFocus"
  },
  {
    "key": "meta+down",
    "command": "problems.action.focusProblemsFromFilter",
    "when": "problemsFilterFocus"
  },
  {
    "key": "meta+down",
    "command": "problems.action.open",
    "when": "problemFocus"
  },
  {
    "key": "enter",
    "command": "problems.action.open",
    "when": "problemFocus"
  },
  {
    "key": "ctrl+enter",
    "command": "problems.action.openToSide",
    "when": "problemFocus"
  },
  // removedkey
  {
    "key": "meta+.",
    "command": "-problems.action.showQuickFixes",
    "when": "problemFocus"
  },
  {
    "key": "ctrl+.",
    "command": "problems.action.showQuickFixes",
    "when": "problemFocus"
  },
  {
    "key": "space",
    "command": "refactorPreview.toggleCheckedState",
    "when": "listFocus && refactorPreview.enabled && !inputFocus"
  },
  // removedkey
  {
    "key": "ctrl+alt+r",
    "command": "-revealFileInOS",
    "when": "!editorFocus"
  },
  {
    "key": "alt+meta+r",
    "command": "revealFileInOS",
    "when": "!editorFocus"
  },
  {
    "key": "enter",
    "command": "revealReference",
    "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand"
  },
  {
    "key": "alt+meta+s",
    "command": "saveAll"
  },
  // removedkey
  {
    "key": "meta+enter",
    "command": "scm.acceptInput",
    "when": "scmRepository"
  },
  {
    "key": "ctrl+enter",
    "command": "scm.acceptInput",
    "when": "scmRepository"
  },
  {
    "key": "alt+down",
    "command": "scm.forceViewNextCommit",
    "when": "scmRepository"
  },
  {
    "key": "alt+up",
    "command": "scm.forceViewPreviousCommit",
    "when": "scmRepository"
  },
  {
    "key": "down",
    "command": "scm.viewNextCommit",
    "when": "scmInputIsInLastPosition && scmRepository && !suggestWidgetVisible"
  },
  {
    "key": "up",
    "command": "scm.viewPreviousCommit",
    "when": "scmInputIsInFirstPosition && scmRepository && !suggestWidgetVisible"
  },
  {
    "key": "escape",
    "command": "search.action.cancel",
    "when": "listFocus && searchViewletVisible && !inputFocus && searchState != '0'"
  },
  // removedkey
  {
    "key": "ctrl+c",
    "command": "-search.action.copyMatch",
    "when": "fileMatchOrMatchFocus"
  },
  {
    "key": "meta+c",
    "command": "search.action.copyMatch",
    "when": "fileMatchOrMatchFocus"
  },
  // removedkey
  {
    "key": "ctrl+alt+c",
    "command": "-search.action.copyPath",
    "when": "fileMatchOrFolderMatchWithResourceFocus"
  },
  {
    "key": "alt+meta+c",
    "command": "search.action.copyPath",
    "when": "fileMatchOrFolderMatchWithResourceFocus"
  },
  {
    "key": "f4",
    "command": "search.action.focusNextSearchResult",
    "when": "hasSearchResult || inSearchEditor"
  },
  {
    "key": "shift+f4",
    "command": "search.action.focusPreviousSearchResult",
    "when": "hasSearchResult || inSearchEditor"
  },
  // removedkey
  {
    "key": "ctrl+up",
    "command": "-search.action.focusSearchFromResults",
    "when": "firstMatchFocus && searchViewletVisible"
  },
  {
    "key": "meta+up",
    "command": "search.action.focusSearchFromResults",
    "when": "firstMatchFocus && searchViewletVisible"
  },
  // removedkey
  {
    "key": "alt+enter",
    "command": "-search.action.openInEditor",
    "when": "hasSearchResult && searchViewletFocus"
  },
  {
    "key": "meta+enter",
    "command": "search.action.openInEditor",
    "when": "hasSearchResult && searchViewletFocus"
  },
  {
    "key": "meta+down",
    "command": "search.action.openResult",
    "when": "fileMatchOrMatchFocus && searchViewletVisible"
  },
  {
    "key": "enter",
    "command": "search.action.openResult",
    "when": "fileMatchOrMatchFocus && searchViewletVisible"
  },
  {
    "key": "ctrl+enter",
    "command": "search.action.openResultToSide",
    "when": "fileMatchOrMatchFocus && searchViewletVisible"
  },
  // removedkey
  {
    "key": "delete",
    "command": "-search.action.remove",
    "when": "fileMatchOrMatchFocus && searchViewletVisible"
  },
  {
    "key": "meta+backspace",
    "command": "search.action.remove",
    "when": "fileMatchOrMatchFocus && searchViewletVisible"
  },
  // removedkey
  {
    "key": "ctrl+shift+1",
    "command": "-search.action.replace",
    "when": "matchFocus && replaceActive && searchViewletVisible"
  },
  {
    "key": "shift+meta+1",
    "command": "search.action.replace",
    "when": "matchFocus && replaceActive && searchViewletVisible"
  },
  // removedkey
  {
    "key": "ctrl+alt+enter",
    "command": "-search.action.replaceAll",
    "when": "replaceActive && searchViewletVisible && !findWidgetVisible"
  },
  {
    "key": "alt+meta+enter",
    "command": "search.action.replaceAll",
    "when": "replaceActive && searchViewletVisible && !findWidgetVisible"
  },
  // removedkey
  {
    "key": "ctrl+shift+enter",
    "command": "-search.action.replaceAllInFile",
    "when": "fileMatchFocus && replaceActive && searchViewletVisible"
  },
  {
    "key": "shift+meta+enter",
    "command": "search.action.replaceAllInFile",
    "when": "fileMatchFocus && replaceActive && searchViewletVisible"
  },
  // removedkey
  {
    "key": "ctrl+shift+1",
    "command": "-search.action.replaceAllInFile",
    "when": "fileMatchFocus && replaceActive && searchViewletVisible"
  },
  {
    "key": "shift+meta+1",
    "command": "search.action.replaceAllInFile",
    "when": "fileMatchFocus && replaceActive && searchViewletVisible"
  },
  // removedkey
  {
    "key": "ctrl+shift+enter",
    "command": "-search.action.replaceAllInFolder",
    "when": "folderMatchFocus && replaceActive && searchViewletVisible"
  },
  {
    "key": "shift+meta+enter",
    "command": "search.action.replaceAllInFolder",
    "when": "folderMatchFocus && replaceActive && searchViewletVisible"
  },
  // removedkey
  {
    "key": "ctrl+shift+1",
    "command": "-search.action.replaceAllInFolder",
    "when": "folderMatchFocus && replaceActive && searchViewletVisible"
  },
  {
    "key": "shift+meta+1",
    "command": "search.action.replaceAllInFolder",
    "when": "folderMatchFocus && replaceActive && searchViewletVisible"
  },
  {
    "key": "shift+alt+f",
    "command": "search.action.restrictSearchToFolder",
    "when": "folderMatchWithResourceFocus && searchViewletVisible"
  },
  // removedkey
  {
    "key": "ctrl+down",
    "command": "-search.focus.nextInputBox",
    "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible"
  },
  {
    "key": "meta+down",
    "command": "search.focus.nextInputBox",
    "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible"
  },
  // removedkey
  {
    "key": "ctrl+up",
    "command": "-search.focus.previousInputBox",
    "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible && !searchInputBoxFocus"
  },
  {
    "key": "meta+up",
    "command": "search.focus.previousInputBox",
    "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible && !searchInputBoxFocus"
  },
  // removedkey
  {
    "key": "ctrl+shift+l",
    "command": "-selectAllSearchEditorMatches",
    "when": "inSearchEditor"
  },
  {
    "key": "shift+meta+l",
    "command": "selectAllSearchEditorMatches",
    "when": "inSearchEditor"
  },
  {
    "key": "escape",
    "command": "settings.action.focusLevelUp",
    "when": "inSettingsEditor && !inSettingsJSONEditor && !inSettingsSearch"
  },
  {
    "key": "enter",
    "command": "settings.action.focusSettingControl",
    "when": "settingRowFocus"
  },
  {
    "key": "down",
    "command": "settings.action.focusSettingsFromSearch",
    "when": "inSettingsSearch && !suggestWidgetVisible"
  },
  {
    "key": "enter",
    "command": "settings.action.focusSettingsList",
    "when": "inSettingsEditor && settingsTocRowFocus"
  },
  {
    "key": "left",
    "command": "settings.action.focusTOC",
    "when": "inSettingsEditor && settingRowFocus"
  },
  {
    "key": "shift+f9",
    "command": "settings.action.showContextMenu",
    "when": "inSettingsEditor"
  },
  // removedkey
  {
    "key": "ctrl+; ctrl+x",
    "command": "-testing.cancelRun"
  },
  {
    "key": "meta+; meta+x",
    "command": "testing.cancelRun"
  },
  // removedkey
  {
    "key": "ctrl+; ctrl+a",
    "command": "-testing.debugAll"
  },
  {
    "key": "meta+; meta+a",
    "command": "testing.debugAll"
  },
  // removedkey
  {
    "key": "ctrl+; ctrl+c",
    "command": "-testing.debugAtCursor",
    "when": "editorTextFocus"
  },
  {
    "key": "meta+; meta+c",
    "command": "testing.debugAtCursor",
    "when": "editorTextFocus"
  },
  // removedkey
  {
    "key": "ctrl+; ctrl+e",
    "command": "-testing.debugFailTests"
  },
  {
    "key": "meta+; meta+e",
    "command": "testing.debugFailTests"
  },
  // removedkey
  {
    "key": "ctrl+; ctrl+l",
    "command": "-testing.debugLastRun"
  },
  {
    "key": "meta+; meta+l",
    "command": "testing.debugLastRun"
  },
  // removedkey
  {
    "key": "ctrl+; ctrl+m",
    "command": "-testing.openOutputPeek"
  },
  {
    "key": "meta+; meta+m",
    "command": "testing.openOutputPeek"
  },
  // removedkey
  {
    "key": "ctrl+; e",
    "command": "-testing.reRunFailTests"
  },
  {
    "key": "meta+; e",
    "command": "testing.reRunFailTests"
  },
  // removedkey
  {
    "key": "ctrl+; l",
    "command": "-testing.reRunLastRun"
  },
  {
    "key": "meta+; l",
    "command": "testing.reRunLastRun"
  },
  // removedkey
  {
    "key": "ctrl+; ctrl+r",
    "command": "-testing.refreshTests",
    "when": "testing.canRefresh"
  },
  {
    "key": "meta+; meta+r",
    "command": "testing.refreshTests",
    "when": "testing.canRefresh"
  },
  // removedkey
  {
    "key": "ctrl+; a",
    "command": "-testing.runAll"
  },
  {
    "key": "meta+; a",
    "command": "testing.runAll"
  },
  // removedkey
  {
    "key": "ctrl+; c",
    "command": "-testing.runAtCursor",
    "when": "editorTextFocus"
  },
  {
    "key": "meta+; c",
    "command": "testing.runAtCursor",
    "when": "editorTextFocus"
  },
  // removedkey
  {
    "key": "ctrl+; f",
    "command": "-testing.runCurrentFile",
    "when": "editorTextFocus"
  },
  {
    "key": "meta+; f",
    "command": "testing.runCurrentFile",
    "when": "editorTextFocus"
  },
  // removedkey
  {
    "key": "ctrl+; ctrl+o",
    "command": "-testing.showMostRecentOutput",
    "when": "testing.hasAnyResults"
  },
  {
    "key": "meta+; meta+o",
    "command": "testing.showMostRecentOutput",
    "when": "testing.hasAnyResults"
  },
  // removedkey
  {
    "key": "ctrl+; ctrl+i",
    "command": "-testing.toggleInlineTestOutput"
  },
  {
    "key": "meta+; meta+i",
    "command": "testing.toggleInlineTestOutput"
  },
  // removedkey
  {
    "key": "alt+h",
    "command": "-testing.toggleTestingPeekHistory",
    "when": "testing.isPeekVisible"
  },
  {
    "key": "alt+meta+h",
    "command": "testing.toggleTestingPeekHistory",
    "when": "testing.isPeekVisible"
  },
  // removedkey
  {
    "key": "alt+c",
    "command": "-toggleSearchCaseSensitive",
    "when": "searchViewletFocus"
  },
  {
    "key": "alt+meta+c",
    "command": "toggleSearchCaseSensitive",
    "when": "searchViewletFocus"
  },
  // removedkey
  {
    "key": "alt+c",
    "command": "-toggleSearchEditorCaseSensitive",
    "when": "inSearchEditor && searchInputBoxFocus"
  },
  {
    "key": "alt+meta+c",
    "command": "toggleSearchEditorCaseSensitive",
    "when": "inSearchEditor && searchInputBoxFocus"
  },
  // removedkey
  {
    "key": "alt+l",
    "command": "-toggleSearchEditorContextLines",
    "when": "inSearchEditor"
  },
  {
    "key": "alt+meta+l",
    "command": "toggleSearchEditorContextLines",
    "when": "inSearchEditor"
  },
  // removedkey
  {
    "key": "alt+r",
    "command": "-toggleSearchEditorRegex",
    "when": "inSearchEditor && searchInputBoxFocus"
  },
  {
    "key": "alt+meta+r",
    "command": "toggleSearchEditorRegex",
    "when": "inSearchEditor && searchInputBoxFocus"
  },
  // removedkey
  {
    "key": "alt+w",
    "command": "-toggleSearchEditorWholeWord",
    "when": "inSearchEditor && searchInputBoxFocus"
  },
  {
    "key": "alt+meta+w",
    "command": "toggleSearchEditorWholeWord",
    "when": "inSearchEditor && searchInputBoxFocus"
  },
  // removedkey
  {
    "key": "alt+p",
    "command": "-toggleSearchPreserveCase",
    "when": "searchViewletFocus"
  },
  {
    "key": "alt+meta+p",
    "command": "toggleSearchPreserveCase",
    "when": "searchViewletFocus"
  },
  // removedkey
  {
    "key": "alt+r",
    "command": "-toggleSearchRegex",
    "when": "searchViewletFocus"
  },
  {
    "key": "alt+meta+r",
    "command": "toggleSearchRegex",
    "when": "searchViewletFocus"
  },
  // removedkey
  {
    "key": "alt+w",
    "command": "-toggleSearchWholeWord",
    "when": "searchViewletFocus"
  },
  {
    "key": "alt+meta+w",
    "command": "toggleSearchWholeWord",
    "when": "searchViewletFocus"
  },
  {
    "key": "ctrl+alt+meta+n",
    "command": "welcome.showNewFileEntries"
  },
  // removedkey
  {
    "key": "ctrl+w",
    "command": "-workbench.action.closeGroup",
    "when": "activeEditorGroupEmpty && multipleEditorGroups"
  },
  {
    "key": "meta+w",
    "command": "workbench.action.closeGroup",
    "when": "activeEditorGroupEmpty && multipleEditorGroups"
  },
  {
    "key": "alt+meta+t",
    "command": "workbench.action.closeOtherEditors"
  },
  {
    "key": "shift+escape",
    "command": "workbench.action.closeQuickOpen",
    "when": "inQuickOpen"
  },
  {
    "key": "escape",
    "command": "workbench.action.closeQuickOpen",
    "when": "inQuickOpen"
  },
  // removedkey
  {
    "key": "ctrl+shift+w",
    "command": "-workbench.action.closeWindow"
  },
  {
    "key": "shift+meta+w",
    "command": "workbench.action.closeWindow"
  },
  {
    "key": "meta+w",
    "command": "workbench.action.closeWindow",
    "when": "!editorIsOpen && !multipleEditorGroups"
  },
  // removedkey
  {
    "key": "alt+f4",
    "command": "-workbench.action.closeWindow"
  },
  {
    "key": "alt+f5",
    "command": "workbench.action.compareEditor.nextChange",
    "when": "textCompareEditorVisible"
  },
  {
    "key": "shift+alt+f5",
    "command": "workbench.action.compareEditor.previousChange",
    "when": "textCompareEditorVisible"
  },
  {
    "key": "shift+f5",
    "command": "workbench.action.debug.disconnect",
    "when": "focusedSessionIsAttach && inDebugMode"
  },
  // removedkey
  {
    "key": "ctrl+shift+f5",
    "command": "-workbench.action.debug.restart",
    "when": "inDebugMode"
  },
  {
    "key": "shift+meta+f5",
    "command": "workbench.action.debug.restart",
    "when": "inDebugMode"
  },
  // removedkey
  {
    "key": "ctrl+f5",
    "command": "-workbench.action.debug.run",
    "when": "debuggersAvailable && debugState != 'initializing'"
  },
  {
    "key": "meta+f5",
    "command": "workbench.action.debug.run",
    "when": "debuggersAvailable && debugState != 'initializing'"
  },
  {
    "key": "f5",
    "command": "workbench.action.debug.start",
    "when": "debuggersAvailable && debugState == 'inactive'"
  },
  // removedkey
  {
    "key": "ctrl+f11",
    "command": "-workbench.action.debug.stepIntoTarget",
    "when": "inDebugMode && stepIntoTargetsSupported && debugState == 'stopped'"
  },
  {
    "key": "meta+f11",
    "command": "workbench.action.debug.stepIntoTarget",
    "when": "inDebugMode && stepIntoTargetsSupported && debugState == 'stopped'"
  },
  {
    "key": "shift+f11",
    "command": "workbench.action.debug.stepOut",
    "when": "debugState == 'stopped'"
  },
  {
    "key": "f10",
    "command": "workbench.action.debug.stepOver",
    "when": "debugState == 'stopped'"
  },
  {
    "key": "shift+f5",
    "command": "workbench.action.debug.stop",
    "when": "inDebugMode && !focusedSessionIsAttach"
  },
  // removedkey
  {
    "key": "ctrl+n",
    "command": "-workbench.action.files.newUntitledFile"
  },
  {
    "key": "meta+n",
    "command": "workbench.action.files.newUntitledFile"
  },
  // removedkey
  {
    "key": "ctrl+o",
    "command": "-workbench.action.files.openFile",
    "when": "true"
  },
  {
    "key": "meta+o",
    "command": "workbench.action.files.openFile",
    "when": "true"
  },
  // removedkey
  {
    "key": "ctrl+o",
    "command": "-workbench.action.files.openFileFolder",
    "when": "isMacNative && openFolderWorkspaceSupport"
  },
  {
    "key": "meta+o",
    "command": "workbench.action.files.openFileFolder",
    "when": "isMacNative && openFolderWorkspaceSupport"
  },
  // removedkey
  {
    "key": "ctrl+k ctrl+o",
    "command": "-workbench.action.files.openFolder",
    "when": "openFolderWorkspaceSupport"
  },
  // removedkey
  {
    "key": "ctrl+o",
    "command": "-workbench.action.files.openFolderViaWorkspace",
    "when": "!openFolderWorkspaceSupport && workbenchState == 'workspace'"
  },
  {
    "key": "meta+o",
    "command": "workbench.action.files.openFolderViaWorkspace",
    "when": "!openFolderWorkspaceSupport && workbenchState == 'workspace'"
  },
  // removedkey
  {
    "key": "ctrl+o",
    "command": "-workbench.action.files.openLocalFile",
    "when": "remoteFileDialogVisible"
  },
  {
    "key": "meta+o",
    "command": "workbench.action.files.openLocalFile",
    "when": "remoteFileDialogVisible"
  },
  {
    "key": "f6",
    "command": "workbench.action.focusNextPart"
  },
  {
    "key": "shift+f6",
    "command": "workbench.action.focusPreviousPart"
  },
  {
    "key": "ctrl+g",
    "command": "workbench.action.gotoLine"
  },
  {
    "key": "escape",
    "command": "workbench.action.hideInterfaceOverview",
    "when": "interfaceOverviewVisible"
  },
  {
    "key": "down",
    "command": "workbench.action.interactivePlayground.arrowDown",
    "when": "interactivePlaygroundFocus && !editorTextFocus"
  },
  {
    "key": "up",
    "command": "workbench.action.interactivePlayground.arrowUp",
    "when": "interactivePlaygroundFocus && !editorTextFocus"
  },
  {
    "key": "pagedown",
    "command": "workbench.action.interactivePlayground.pageDown",
    "when": "interactivePlaygroundFocus && !editorTextFocus"
  },
  {
    "key": "pageup",
    "command": "workbench.action.interactivePlayground.pageUp",
    "when": "interactivePlaygroundFocus && !editorTextFocus"
  },
  // removedkey
  {
    "key": "ctrl+shift+pageup",
    "command": "-workbench.action.moveEditorLeftInGroup"
  },
  {
    "key": "shift+meta+pageup",
    "command": "workbench.action.moveEditorLeftInGroup"
  },
  // removedkey
  {
    "key": "ctrl+shift+pagedown",
    "command": "-workbench.action.moveEditorRightInGroup"
  },
  {
    "key": "shift+meta+pagedown",
    "command": "workbench.action.moveEditorRightInGroup"
  },
  // removedkey
  {
    "key": "shift+alt+1",
    "command": "-workbench.action.moveEditorToFirstGroup"
  },
  {
    "key": "ctrl+meta+1",
    "command": "workbench.action.moveEditorToFirstGroup"
  },
  // removedkey
  {
    "key": "shift+alt+9",
    "command": "-workbench.action.moveEditorToLastGroup"
  },
  {
    "key": "ctrl+meta+9",
    "command": "workbench.action.moveEditorToLastGroup"
  },
  // removedkey
  {
    "key": "ctrl+alt+right",
    "command": "-workbench.action.moveEditorToNextGroup"
  },
  {
    "key": "ctrl+meta+right",
    "command": "workbench.action.moveEditorToNextGroup"
  },
  // removedkey
  {
    "key": "ctrl+alt+left",
    "command": "-workbench.action.moveEditorToPreviousGroup"
  },
  {
    "key": "ctrl+meta+left",
    "command": "workbench.action.moveEditorToPreviousGroup"
  },
  // removedkey
  {
    "key": "ctrl+alt+-",
    "command": "-workbench.action.navigateBack",
    "when": "canNavigateBack"
  },
  {
    "key": "ctrl+-",
    "command": "workbench.action.navigateBack",
    "when": "canNavigateBack"
  },
  {
    "key": "ctrl+shift+-",
    "command": "workbench.action.navigateForward",
    "when": "canNavigateForward"
  },
  // removedkey
  {
    "key": "ctrl+pagedown",
    "command": "-workbench.action.nextEditor"
  },
  // addedcustomkey
  {
    "key": "ctrl+shift+]",
    "command": "workbench.action.nextEditor"
  },
  // removedkey
  {
    "key": "ctrl+k ctrl+h",
    "command": "-workbench.action.output.toggleOutput",
    "when": "workbench.panel.output.active"
  },
  {
    "key": "shift+meta+u",
    "command": "workbench.action.output.toggleOutput",
    "when": "workbench.panel.output.active"
  },
  // removedkey
  {
    "key": "ctrl+pageup",
    "command": "-workbench.action.previousEditor"
  },
  // addedcustomkey
  {
    "key": "ctrl+shift+[",
    "command": "workbench.action.previousEditor"
  },
  // removedkey
  {
    "key": "ctrl+k ctrl+pageup",
    "command": "workbench.action.previousEditorInGroup"
  },
  // addedcustomkey
  {
    "key": "ctrl+k ctrl+alt+left",
    "command": "workbench.action.previousEditorInGroup"
  },
  // removedkey
  {
    "key": "ctrl+e",
    "command": "-workbench.action.quickOpen"
  },
  // removedkey
  {
    "key": "ctrl+p",
    "command": "-workbench.action.quickOpen"
  },
  // addedkey
  {
    "key": "meta+p",
    "command": "workbench.action.quickOpen"
  },
  {
    "key": "ctrl+shift+tab",
    "command": "workbench.action.quickOpenLeastRecentlyUsedEditorInGroup",
    "when": "!activeEditorGroupEmpty"
  },
  {
    "key": "ctrl+tab",
    "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup",
    "when": "!activeEditorGroupEmpty"
  },
  // removedkey
  {
    "key": "ctrl+q",
    "command": "-workbench.action.quit"
  },
  // addedkey
  {
    "key": "ctrl+q",
    "command": "workbench.action.quickOpenView"
  },
  // addedkey revisit
  {
    "key": "meta+q",
    "command": "workbench.action.quit"
  },
  // removedkey
  {
    "key": "ctrl+k ctrl+p",
    "command": "-workbench.action.showAllEditors"
  },
  // addedcustomkey
  {
    "key": "ctrl+alt+tab",
    "command": "workbench.action.showAllEditors"
  },
  // removedkey
  {
    "key": "ctrl+t",
    "command": "-workbench.action.showAllSymbols"
  },
  // addedkey
  {
    "key": "meta+t",
    "command": "workbench.action.showAllSymbols"
  },
  {
    "key": "f1",
    "command": "workbench.action.showCommands"
  },
  // removedkey
  {
    "key": "ctrl+shift+p",
    "command": "-workbench.action.showCommands"
  },
  // addedkey
  {
    "key": "shift+meta+p",
    "command": "workbench.action.showCommands"
  },
  // removedkey
  {
    "key": "ctrl+\\",
    "command": "-workbench.action.splitEditor"
  },
  // addedkey
  {
    "key": "meta+\\",
    "command": "workbench.action.splitEditor"
  },
  // removedkey
  {
    "key": "ctrl+shift+b",
    "command": "-workbench.action.tasks.build",
    "when": "taskCommandsRegistered"
  },
  // addedkey
  {
    "key": "shift+meta+b",
    "command": "workbench.action.tasks.build",
    "when": "taskCommandsRegistered"
  },
  {
    "key": "escape",
    "command": "workbench.action.terminal.clearSelection",
    "when": "terminalFocus && terminalHasBeenCreated && terminalTextSelected && !terminalFindVisible || terminalFocus && terminalProcessSupported && terminalTextSelected && !terminalFindVisible"
  },
  // removedkey
  {
    "key": "ctrl+shift+c",
    "command": "-workbench.action.terminal.copySelection",
    "when": "terminalFocus && terminalHasBeenCreated && terminalTextSelected || terminalFocus && terminalProcessSupported && terminalTextSelected"
  },
  // addedkey
  {
    "key": "meta+c",
    "command": "workbench.action.terminal.copySelection",
    "when": "terminalFocus && terminalHasBeenCreated && terminalTextSelected || terminalFocus && terminalProcessSupported && terminalTextSelected"
  },
  {
    "key": "f3",
    "command": "workbench.action.terminal.findNext",
    "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "meta+g",
    "command": "workbench.action.terminal.findNext",
    "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "shift+enter",
    "command": "workbench.action.terminal.findNext",
    "when": "terminalFindInputFocused && terminalHasBeenCreated || terminalFindInputFocused && terminalProcessSupported"
  },
  {
    "key": "shift+f3",
    "command": "workbench.action.terminal.findPrevious",
    "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "shift+meta+g",
    "command": "workbench.action.terminal.findPrevious",
    "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "enter",
    "command": "workbench.action.terminal.findPrevious",
    "when": "terminalFindInputFocused && terminalHasBeenCreated || terminalFindInputFocused && terminalProcessSupported"
  },
  // removedkey
  {
    "key": "ctrl+pagedown",
    "command": "-workbench.action.terminal.focusNext",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
  },
  // addedcustomkey
  {
    "key": "ctrl+shift+]",
    "command": "workbench.action.terminal.focusNext",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
  },
  // removedkey
  {
    "key": "alt+down",
    "command": "-workbench.action.terminal.focusNextPane",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  // addedkey
  {
    "key": "alt+meta+down",
    "command": "workbench.action.terminal.focusNextPane",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  // removedkey
  {
    "key": "alt+right",
    "command": "-workbench.action.terminal.focusNextPane",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  // addedkey
  {
    "key": "alt+meta+right",
    "command": "workbench.action.terminal.focusNextPane",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "shift+escape",
    "command": "workbench.action.terminal.hideFind",
    "when": "terminalFindVisible && terminalFocus && terminalHasBeenCreated || terminalFindVisible && terminalFocus && terminalProcessSupported"
  },
  {
    "key": "escape",
    "command": "workbench.action.terminal.hideFind",
    "when": "terminalFindVisible && terminalFocus && terminalHasBeenCreated || terminalFindVisible && terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+w",
    "command": "workbench.action.terminal.killEditor",
    "when": "terminalEditorFocus && terminalFocus && terminalHasBeenCreated && resourceScheme == 'vscode-terminal' || terminalEditorFocus && terminalFocus && terminalProcessSupported && resourceScheme == 'vscode-terminal'"
  },
  {
    "key": "delete",
    "command": "workbench.action.terminal.killInstance",
    "when": "terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus"
  },
  {
    "key": "escape",
    "command": "workbench.action.terminal.navigationModeExit",
    "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalProcessSupported"
  },
  {
    "key": "down",
    "command": "workbench.action.terminal.navigationModeFocusNext",
    "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalNavigationModeActive && terminalProcessSupported || accessibilityModeEnabled && terminalFocus && terminalNavigationModeActive && terminalProcessSupported"
  },
  {
    "key": "ctrl+down",
    "command": "workbench.action.terminal.navigationModeFocusNext",
    "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalProcessSupported || accessibilityModeEnabled && terminalFocus && terminalProcessSupported"
  },
  {
    "key": "pagedown",
    "command": "workbench.action.terminal.navigationModeFocusNextPage",
    "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalNavigationModeActive && terminalProcessSupported || accessibilityModeEnabled && terminalFocus && terminalNavigationModeActive && terminalProcessSupported"
  },
  {
    "key": "up",
    "command": "workbench.action.terminal.navigationModeFocusPrevious",
    "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalNavigationModeActive && terminalProcessSupported || accessibilityModeEnabled && terminalFocus && terminalNavigationModeActive && terminalProcessSupported"
  },
  {
    "key": "ctrl+up",
    "command": "workbench.action.terminal.navigationModeFocusPrevious",
    "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalProcessSupported || accessibilityModeEnabled && terminalFocus && terminalProcessSupported"
  },
  {
    "key": "pageup",
    "command": "workbench.action.terminal.navigationModeFocusPreviousPage",
    "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalNavigationModeActive && terminalProcessSupported || accessibilityModeEnabled && terminalFocus && terminalNavigationModeActive && terminalProcessSupported"
  },
  {
    "key": "ctrl+shift+`",
    "command": "workbench.action.terminal.new",
    "when": "terminalProcessSupported || terminalWebExtensionContributedProfile"
  },
  {
    "key": "ctrl+shift+c",
    "command": "workbench.action.terminal.openNativeConsole",
    "when": "!terminalFocus"
  },
  {
    "key": "ctrl+shift+v",
    "command": "workbench.action.terminal.paste",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "shift+insert",
    "command": "workbench.action.terminal.pasteSelection",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "f2",
    "command": "workbench.action.terminal.renameInstance",
    "when": "terminalHasBeenCreated && terminalTabsFocus && terminalTabsSingularSelection || terminalProcessSupported && terminalTabsFocus && terminalTabsSingularSelection"
  },
  {
    "key": "ctrl+shift+left",
    "command": "workbench.action.terminal.resizePaneLeft",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+shift+right",
    "command": "workbench.action.terminal.resizePaneRight",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+shift+down",
    "command": "workbench.action.terminal.scrollDown",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive"
  },
  {
    "key": "shift+pagedown",
    "command": "workbench.action.terminal.scrollDownPage",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive"
  },
  {
    "key": "shift+end",
    "command": "workbench.action.terminal.scrollToBottom",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive"
  },
  {
    "key": "ctrl+down",
    "command": "workbench.action.terminal.scrollToNextCommand",
    "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled"
  },
  {
    "key": "ctrl+up",
    "command": "workbench.action.terminal.scrollToPreviousCommand",
    "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled"
  },
  {
    "key": "shift+home",
    "command": "workbench.action.terminal.scrollToTop",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive"
  },
  {
    "key": "ctrl+shift+up",
    "command": "workbench.action.terminal.scrollUp",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive"
  },
  {
    "key": "shift+pageup",
    "command": "workbench.action.terminal.scrollUpPage",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive"
  },
  {
    "key": "ctrl+shift+down",
    "command": "workbench.action.terminal.selectToNextCommand",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+shift+up",
    "command": "workbench.action.terminal.selectToPreviousCommand",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+space",
    "command": "workbench.action.terminal.sendSequence",
    "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
    "args": {
      "text": "\u001b[24~a"
    }
  },
  {
    "key": "alt+space",
    "command": "workbench.action.terminal.sendSequence",
    "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
    "args": {
      "text": "\u001b[24~b"
    }
  },
  {
    "key": "shift+enter",
    "command": "workbench.action.terminal.sendSequence",
    "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
    "args": {
      "text": "\u001b[24~c"
    }
  },
  {
    "key": "ctrl+backspace",
    "command": "workbench.action.terminal.sendSequence",
    "when": "terminalFocus",
    "args": {
      "text": "\u0017"
    }
  },
  {
    "key": "ctrl+delete",
    "command": "workbench.action.terminal.sendSequence",
    "when": "terminalFocus",
    "args": {
      "text": "\u001bd"
    }
  },
  {
    "key": "ctrl+shift+2",
    "command": "workbench.action.terminal.sendSequence",
    "when": "terminalFocus",
    "args": {
      "text": "\u0000"
    }
  },
  {
    "key": "ctrl+shift+6",
    "command": "workbench.action.terminal.sendSequence",
    "when": "terminalFocus",
    "args": {
      "text": "\u001e"
    }
  },
  {
    "key": "ctrl+/",
    "command": "workbench.action.terminal.sendSequence",
    "when": "terminalFocus",
    "args": {
      "text": "\u001f"
    }
  },
  {
    "key": "alt+z",
    "command": "workbench.action.terminal.sizeToContentWidth",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen || terminalFocus && terminalIsOpen && terminalProcessSupported"
  },
  {
    "key": "ctrl+shift+5",
    "command": "workbench.action.terminal.split",
    "when": "terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile"
  },
  {
    "key": "ctrl+shift+5",
    "command": "workbench.action.terminal.splitInstance",
    "when": "terminalProcessSupported && terminalTabsFocus"
  },
  {
    "key": "alt+c",
    "command": "workbench.action.terminal.toggleFindCaseSensitive",
    "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "alt+r",
    "command": "workbench.action.terminal.toggleFindRegex",
    "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "alt+w",
    "command": "workbench.action.terminal.toggleFindWholeWord",
    "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+`",
    "command": "workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
  },
  {
    "key": "shift+alt+0",
    "command": "workbench.action.toggleEditorGroupLayout"
  },
  {
    "key": "f11",
    "command": "workbench.action.toggleFullScreen",
    "when": "!isIOS"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.togglePanel"
  },
  {
    "key": "ctrl+b",
    "command": "workbench.action.toggleSidebarVisibility"
  },
  {
    "key": "ctrl+k z",
    "command": "workbench.action.toggleZenMode"
  },
  {
    "key": "ctrl+k shift+enter",
    "command": "workbench.action.unpinEditor",
    "when": "activeEditorIsPinned"
  },
  {
    "key": "ctrl+shift+m",
    "command": "workbench.actions.view.problems",
    "when": "workbench.panel.markers.view.active"
  },
  {
    "key": "escape",
    "command": "workbench.banner.focusBanner",
    "when": "bannerFocused"
  },
  {
    "key": "down",
    "command": "workbench.banner.focusNextAction",
    "when": "bannerFocused"
  },
  {
    "key": "right",
    "command": "workbench.banner.focusNextAction",
    "when": "bannerFocused"
  },
  {
    "key": "up",
    "command": "workbench.banner.focusPreviousAction",
    "when": "bannerFocused"
  },
  {
    "key": "left",
    "command": "workbench.banner.focusPreviousAction",
    "when": "bannerFocused"
  },
  {
    "key": "ctrl+shift+y",
    "command": "workbench.debug.action.toggleRepl",
    "when": "workbench.panel.repl.view.active"
  },
  {
    "key": "ctrl+k c",
    "command": "workbench.files.action.compareWithClipboard"
  },
  {
    "key": "ctrl+k d",
    "command": "workbench.files.action.compareWithSaved"
  },
  {
    "key": "ctrl+k e",
    "command": "workbench.files.action.focusOpenEditorsView",
    "when": "workbench.explorer.openEditorsView.active"
  },
  {
    "key": "escape",
    "command": "workbench.statusBar.clearFocus",
    "when": "statusBarFocused"
  },
  {
    "key": "home",
    "command": "workbench.statusBar.focusFirst",
    "when": "statusBarFocused"
  },
  {
    "key": "end",
    "command": "workbench.statusBar.focusLast",
    "when": "statusBarFocused"
  },
  {
    "key": "down",
    "command": "workbench.statusBar.focusNext",
    "when": "statusBarFocused"
  },
  {
    "key": "right",
    "command": "workbench.statusBar.focusNext",
    "when": "statusBarFocused"
  },
  {
    "key": "up",
    "command": "workbench.statusBar.focusPrevious",
    "when": "statusBarFocused"
  },
  {
    "key": "left",
    "command": "workbench.statusBar.focusPrevious",
    "when": "statusBarFocused"
  },
  {
    "key": "ctrl+shift+d",
    "command": "workbench.view.debug",
    "when": "viewContainer.workbench.view.debug.enabled"
  },
  {
    "key": "ctrl+shift+e",
    "command": "workbench.view.explorer",
    "when": "viewContainer.workbench.view.explorer.enabled"
  },
  {
    "key": "ctrl+shift+x",
    "command": "workbench.view.extensions",
    "when": "viewContainer.workbench.view.extensions.enabled"
  },
  {
    "key": "ctrl+shift+g",
    "command": "workbench.view.scm",
    "when": "workbench.scm.active"
  },
  {
    "key": "ctrl+shift+f",
    "command": "workbench.view.search",
    "when": "workbench.view.search.active && neverMatch =~ /doesNotMatch/"
  },
  {
    "key": "ctrl+right",
    "command": "breadcrumbs.focusNextWithPicker",
    "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"
  },
  {
    "key": "ctrl+left",
    "command": "breadcrumbs.focusPreviousWithPicker",
    "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"
  },
  {
    "key": "escape",
    "command": "breadcrumbs.selectEditor",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "ctrl+k down",
    "command": "views.moveViewDown",
    "when": "focusedView != ''"
  },
  {
    "key": "ctrl+k left",
    "command": "views.moveViewLeft",
    "when": "focusedView != ''"
  },
  {
    "key": "ctrl+k right",
    "command": "views.moveViewRight",
    "when": "focusedView != ''"
  },
  {
    "key": "ctrl+k up",
    "command": "views.moveViewUp",
    "when": "focusedView != ''"
  },
  {
    "key": "ctrl+pagedown",
    "command": "workbench.action.debug.nextConsole",
    "when": "inDebugRepl"
  },
  {
    "key": "ctrl+pageup",
    "command": "workbench.action.debug.prevConsole",
    "when": "inDebugRepl"
  },
  {
    "key": "f6",
    "command": "workbench.action.debug.pause",
    "when": "debugState == 'running'"
  },
  {
    "key": "f2",
    "command": "debug.renameWatchExpression",
    "when": "watchExpressionsFocused"
  },
  {
    "key": "f2",
    "command": "debug.setVariable",
    "when": "variablesFocused"
  },
  {
    "key": "space",
    "command": "debug.toggleBreakpoint",
    "when": "breakpointsFocused && !inputFocus"
  },
  {
    "key": "shift+delete",
    "command": "deleteFile",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "delete",
    "command": "deleteFile",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceMoveableToTrash && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "escape",
    "command": "editor.closeCallHierarchy",
    "when": "callHierarchyVisible && !config.editor.stablePeek"
  },
  {
    "key": "escape",
    "command": "editor.closeTypeHierarchy",
    "when": "typeHierarchyVisible && !config.editor.stablePeek"
  },
  {
    "key": "enter",
    "command": "explorer.openAndPassFocus",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsFolder && !inputFocus"
  },
  {
    "key": "escape",
    "command": "filesExplorer.cancelCut",
    "when": "explorerResourceCut && explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },
  {
    "key": "ctrl+c",
    "command": "filesExplorer.copy",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
  },
  {
    "key": "ctrl+x",
    "command": "filesExplorer.cut",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "space",
    "command": "filesExplorer.openFilePreserveFocus",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsFolder && !inputFocus"
  },
  {
    "key": "ctrl+v",
    "command": "filesExplorer.paste",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "home",
    "command": "firstCompressedFolder",
    "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedFirstFocus && !inputFocus"
  },
  {
    "key": "end",
    "command": "lastCompressedFolder",
    "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedLastFocus && !inputFocus"
  },
  {
    "key": "delete",
    "command": "moveFileToTrash",
    "when": "explorerResourceMoveableToTrash && explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "right",
    "command": "nextCompressedFolder",
    "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedLastFocus && !inputFocus"
  },
  {
    "key": "left",
    "command": "previousCompressedFolder",
    "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedFirstFocus && !inputFocus"
  },
  {
    "key": "delete",
    "command": "remote.tunnel.closeInline",
    "when": "tunnelCloseable && tunnelViewFocus"
  },
  {
    "key": "ctrl+c",
    "command": "remote.tunnel.copyAddressInline",
    "when": "tunnelViewFocus && tunnelType == 'Detected' && tunnelViewMultiSelection == 'undefined' || tunnelViewFocus && tunnelType == 'Forwarded' && tunnelViewMultiSelection == 'undefined'"
  },
  {
    "key": "f2",
    "command": "remote.tunnel.label",
    "when": "tunnelViewFocus && tunnelType == 'Forwarded' && tunnelViewMultiSelection == 'undefined'"
  },
  {
    "key": "f2",
    "command": "renameFile",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "f5",
    "command": "workbench.action.debug.continue",
    "when": "debugState == 'stopped'"
  },
  {
    "key": "f11",
    "command": "workbench.action.debug.stepInto",
    "when": "debugState != 'inactive'"
  },
  {
    "key": "shift+escape",
    "command": "closeReferenceSearch",
    "when": "referenceSearchVisible && !config.editor.stablePeek"
  },
  {
    "key": "escape",
    "command": "closeReferenceSearch",
    "when": "referenceSearchVisible && !config.editor.stablePeek"
  },
  {
    "key": "escape",
    "command": "notifications.hideList",
    "when": "notificationCenterVisible"
  },
  {
    "key": "ctrl+alt+-",
    "command": "workbench.action.quickInputBack",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+tab",
    "command": "workbench.action.quickOpenNavigateNextInEditorPicker",
    "when": "inEditorsPicker && inQuickOpen"
  },
  {
    "key": "ctrl+e",
    "command": "workbench.action.quickOpenNavigateNextInFilePicker",
    "when": "inFilesPicker && inQuickOpen"
  },
  {
    "key": "ctrl+p",
    "command": "workbench.action.quickOpenNavigateNextInFilePicker",
    "when": "inFilesPicker && inQuickOpen"
  },
  {
    "key": "ctrl+r",
    "command": "workbench.action.quickOpenNavigateNextInRecentFilesPicker",
    "when": "inQuickOpen && inRecentFilesPicker"
  },
  {
    "key": "ctrl+shift+tab",
    "command": "workbench.action.quickOpenNavigatePreviousInEditorPicker",
    "when": "inEditorsPicker && inQuickOpen"
  },
  {
    "key": "ctrl+shift+e",
    "command": "workbench.action.quickOpenNavigatePreviousInFilePicker",
    "when": "inFilesPicker && inQuickOpen"
  },
  {
    "key": "ctrl+shift+p",
    "command": "workbench.action.quickOpenNavigatePreviousInFilePicker",
    "when": "inFilesPicker && inQuickOpen"
  },
  {
    "key": "ctrl+shift+r",
    "command": "workbench.action.quickOpenNavigatePreviousInRecentFilesPicker",
    "when": "inQuickOpen && inRecentFilesPicker"
  },
  {
    "key": "ctrl+r",
    "command": "workbench.action.reloadWindow",
    "when": "isDevelopment"
  },
  {
    "key": "ctrl+shift+f",
    "command": "workbench.action.terminal.searchWorkspace",
    "when": "terminalFocus && terminalProcessSupported && terminalTextSelected"
  },
  {
    "key": "ctrl+shift+i",
    "command": "workbench.action.toggleDevTools",
    "when": "isDevelopment"
  },
  {
    "key": "escape",
    "command": "notifications.hideToasts",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "key": "f10",
    "command": "extension.node-debug.startWithStopOnEntry",
    "when": "!inDebugMode && debugConfigurationType == 'node' || !inDebugMode && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && debugConfigurationType == 'pwa-node'"
  },
  {
    "key": "ctrl+k ctrl+alt+s",
    "command": "git.stageSelectedRanges",
    "when": "isInDiffEditor"
  },
  {
    "key": "ctrl+shift+v",
    "command": "markdown.showPreview",
    "when": "!notebookEditorFocused && editorLangId == 'markdown'"
  },
  {
    "key": "shift+alt+f12",
    "command": "references-view.findReferences",
    "when": "editorHasReferenceProvider"
  },
  {
    "key": "f11",
    "command": "extension.node-debug.startWithStopOnEntry",
    "when": "!inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'node' || !inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'pwa-node'"
  },
  {
    "key": "ctrl+k ctrl+n",
    "command": "git.unstageSelectedRanges",
    "when": "isInDiffEditor"
  },
  {
    "key": "ctrl+k v",
    "command": "markdown.showPreviewToSide",
    "when": "!notebookEditorFocused && editorLangId == 'markdown'"
  },
  {
    "key": "f4",
    "command": "references-view.next",
    "when": "reference-list.hasResult && references-view.canNavigate"
  },
  {
    "key": "ctrl+k ctrl+r",
    "command": "git.revertSelectedRanges",
    "when": "isInDiffEditor"
  },
  {
    "key": "shift+f4",
    "command": "references-view.prev",
    "when": "reference-list.hasResult && references-view.canNavigate"
  },
  {
    "key": "shift+alt+h",
    "command": "references-view.showCallHierarchy",
    "when": "editorHasCallHierarchyProvider"
  },
  {
    "key": "alt+o",
    "command": "C_Cpp.SwitchHeaderSource",
    "when": "editorTextFocus && editorLangId == 'c' || editorTextFocus && editorLangId == 'cpp' || editorTextFocus && editorLangId == 'cuda-cpp'"
  },
  {
    "key": "f7",
    "command": "cmake.build",
    "when": "cmake:enableFullFeatureSet && !cmake:hideBuildCommand"
  },
  {
    "key": "shift+alt+u",
    "command": "java.projectConfiguration.update",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+b",
    "command": "markdown.extension.editing.toggleBold",
    "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^qmd$/"
  },
  {
    "key": "ctrl+alt+b",
    "command": "platformio-ide.build"
  },
  {
    "key": "shift+alt+r",
    "command": "remote-wsl.revealInExplorer",
    "when": "false"
  },
  {
    "key": "ctrl+shift+u",
    "command": "rust-analyzer.parentModule",
    "when": "editorTextFocus && editorLangId == 'rust'"
  },
  {
    "key": "shift+f7",
    "command": "cmake.buildWithTarget",
    "when": "cmake:enableFullFeatureSet && !cmake:hideBuildCommand"
  },
  {
    "key": "shift+alt+b",
    "command": "java.workspace.compile"
  },
  {
    "key": "ctrl+i",
    "command": "markdown.extension.editing.toggleItalic",
    "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^qmd$/"
  },
  {
    "key": "ctrl+alt+u",
    "command": "platformio-ide.upload"
  },
  {
    "key": "ctrl+shift+m",
    "command": "rust-analyzer.matchingBrace",
    "when": "editorTextFocus && editorLangId == 'rust'"
  },
  {
    "key": "ctrl+f5",
    "command": "cmake.debugTarget",
    "when": "cmake:enableFullFeatureSet && inCMakeProject && !cmake:hideDebugCommand && !inDebugMode"
  },
  {
    "key": "ctrl+shift+v",
    "command": "java.action.clipboardPasteAction",
    "when": "javaLSReady && editorLangId == 'java'"
  },
  {
    "key": "alt+s",
    "command": "markdown.extension.editing.toggleStrikethrough",
    "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^qmd$/"
  },
  {
    "key": "ctrl+alt+s",
    "command": "platformio-ide.serialMonitor"
  },
  {
    "key": "ctrl+shift+j",
    "command": "rust-analyzer.joinLines",
    "when": "editorTextFocus && editorLangId == 'rust'"
  },
  {
    "key": "shift+f5",
    "command": "cmake.launchTarget",
    "when": "cmake:enableFullFeatureSet && !cmake:hideDebugCommand && !inDebugMode"
  },
  {
    "key": "ctrl+shift+]",
    "command": "markdown.extension.editing.toggleHeadingUp",
    "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^qmd$/"
  },
  {
    "key": "ctrl+alt+t",
    "command": "workbench.action.tasks.runTask"
  },
  {
    "key": "ctrl+shift+[",
    "command": "markdown.extension.editing.toggleHeadingDown",
    "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^qmd$/"
  },
  {
    "key": "ctrl+m",
    "command": "markdown.extension.editing.toggleMath",
    "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^qmd$/"
  },
  {
    "key": "enter",
    "command": "markdown.extension.onEnterKey",
    "when": "editorTextFocus && !editorHasMultipleSelections && !editorReadonly && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && !suggestWidgetVisible && vim.mode != 'CommandlineInProgress' && vim.mode != 'EasyMotionInputMode' && vim.mode != 'EasyMotionMode' && vim.mode != 'Normal' && vim.mode != 'Replace' && vim.mode != 'SearchInProgressMode' && vim.mode != 'SurroundInputMode' && vim.mode != 'Visual' && vim.mode != 'VisualBlock' && vim.mode != 'VisualLine' && editorLangId =~ /^markdown$|^rmd$|^qmd$/"
  },
  {
    "key": "ctrl+enter",
    "command": "markdown.extension.onCtrlEnterKey",
    "when": "editorTextFocus && !editorHasMultipleSelections && !editorReadonly && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^qmd$/"
  },
  {
    "key": "shift+enter",
    "command": "markdown.extension.onShiftEnterKey",
    "when": "editorTextFocus && !editorHasMultipleSelections && !editorReadonly && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^qmd$/"
  },
  {
    "key": "tab",
    "command": "markdown.extension.onTabKey",
    "when": "editorTextFocus && markdown.extension.editor.cursor.inList && !editorHasMultipleSelections && !editorReadonly && !editorTabMovesFocus && !hasOtherSuggestions && !hasSnippetCompletions && !inSnippetMode && !inlineSuggestionVisible && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^qmd$/"
  },
  {
    "key": "shift+tab",
    "command": "markdown.extension.onShiftTabKey",
    "when": "editorTextFocus && markdown.extension.editor.cursor.inList && !editorHasMultipleSelections && !editorReadonly && !editorTabMovesFocus && !hasOtherSuggestions && !hasSnippetCompletions && !inSnippetMode && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^qmd$/"
  },
  {
    "key": "backspace",
    "command": "markdown.extension.onBackspaceKey",
    "when": "editorTextFocus && !editorHasMultipleSelections && !editorReadonly && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && !suggestWidgetVisible && vim.mode != 'CommandlineInProgress' && vim.mode != 'EasyMotionInputMode' && vim.mode != 'EasyMotionMode' && vim.mode != 'Normal' && vim.mode != 'Replace' && vim.mode != 'SearchInProgressMode' && vim.mode != 'SurroundInputMode' && vim.mode != 'Visual' && vim.mode != 'VisualBlock' && vim.mode != 'VisualLine' && editorLangId =~ /^markdown$|^rmd$|^qmd$/"
  },
  {
    "key": "alt+up",
    "command": "markdown.extension.onMoveLineUp",
    "when": "editorTextFocus && !editorReadonly && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^qmd$/"
  },
  {
    "key": "alt+down",
    "command": "markdown.extension.onMoveLineDown",
    "when": "editorTextFocus && !editorReadonly && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^qmd$/"
  },
  {
    "key": "ctrl+shift+alt+up",
    "command": "markdown.extension.onCopyLineUp",
    "when": "editorTextFocus && !editorReadonly && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^qmd$/"
  },
  {
    "key": "ctrl+shift+alt+down",
    "command": "markdown.extension.onCopyLineDown",
    "when": "editorTextFocus && !editorReadonly && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^qmd$/"
  },
  {
    "key": "ctrl+]",
    "command": "markdown.extension.onIndentLines",
    "when": "editorTextFocus && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^qmd$/"
  },
  {
    "key": "ctrl+[",
    "command": "markdown.extension.onOutdentLines",
    "when": "editorTextFocus && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^qmd$/"
  },
  {
    "key": "alt+c",
    "command": "markdown.extension.checkTaskList",
    "when": "editorTextFocus && editorLangId =~ /^markdown$|^rmd$|^qmd$/"
  },
  {
    "key": "ctrl+shift+v",
    "command": "markdown.extension.closePreview",
    "when": "markdownPreviewFocus"
  },
  {
    "key": "ctrl+k v",
    "command": "markdown.extension.closePreview",
    "when": "markdownPreviewFocus"
  },
  {
    "key": "ctrl+v",
    "command": "markdown.extension.editing.paste",
    "when": "editorHasSelection && editorTextFocus && editorLangId =~ /^markdown$|^rmd$|^qmd$/"
  },
  {
    "key": "ctrl+.",
    "command": "acceptSelectedCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "enter",
    "command": "acceptSelectedCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "shift+escape",
    "command": "hideCodeActionWidget",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "escape",
    "command": "hideCodeActionWidget",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "ctrl+enter",
    "command": "previewSelectedCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "ctrl+down",
    "command": "selectNextCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "down",
    "command": "selectNextCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "ctrl+up",
    "command": "selectPrevCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "up",
    "command": "selectPrevCodeAction",
    "when": "codeActionMenuVisible"
  },
  // Here are other available commands:
  // - C_Cpp.AddDebugConfiguration
  // - C_Cpp.AddToIncludePath
  // - C_Cpp.BuildAndDebugFile
  // - C_Cpp.BuildAndRunFile
  // - C_Cpp.CancelCodeAnalysis
  // - C_Cpp.CheckForCompiler
  // - C_Cpp.ConfigurationEdit
  // - C_Cpp.ConfigurationEditJSON
  // - C_Cpp.ConfigurationEditUI
  // - C_Cpp.ConfigurationProviderSelect
  // - C_Cpp.ConfigurationSelect
  // - C_Cpp.CreateDeclarationOrDefinition
  // - C_Cpp.DisableAllTypeCodeAnalysisProblems
  // - C_Cpp.DisableErrorSquiggles
  // - C_Cpp.EnableErrorSquiggles
  // - C_Cpp.FixAllCodeAnalysisProblems
  // - C_Cpp.FixAllTypeCodeAnalysisProblems
  // - C_Cpp.FixThisCodeAnalysisProblem
  // - C_Cpp.GenerateDoxygenComment
  // - C_Cpp.GenerateEditorConfig
  // - C_Cpp.GoToNextDirectiveInGroup
  // - C_Cpp.GoToPrevDirectiveInGroup
  // - C_Cpp.LogDiagnostics
  // - C_Cpp.PauseCodeAnalysis
  // - C_Cpp.PauseParsing
  // - C_Cpp.RemoveAllCodeAnalysisProblems
  // - C_Cpp.RemoveCodeAnalysisProblems
  // - C_Cpp.RescanWorkspace
  // - C_Cpp.ResetDatabase
  // - C_Cpp.RestartIntelliSenseForFile
  // - C_Cpp.ResumeCodeAnalysis
  // - C_Cpp.ResumeParsing
  // - C_Cpp.RunCodeAnalysisOnActiveFile
  // - C_Cpp.RunCodeAnalysisOnAllFiles
  // - C_Cpp.RunCodeAnalysisOnOpenFiles
  // - C_Cpp.ShowCodeAnalysisCommands
  // - C_Cpp.ShowCodeAnalysisDocumentation
  // - C_Cpp.ShowParsingCommands
  // - C_Cpp.ShowReferenceItem
  // - C_Cpp.ShowReferencesProgress
  // - C_Cpp.TakeSurvey
  // - C_Cpp.ToggleDimInactiveRegions
  // - C_Cpp.ToggleIncludeFallback
  // - C_Cpp.VcpkgClipboardInstallSuggested
  // - C_Cpp.VcpkgOnlineHelpSuggested
  // - C_Cpp.activeSshTarget
  // - C_Cpp.addSshTarget
  // - C_Cpp.referencesViewGroupByType
  // - C_Cpp.referencesViewUngroupByType
  // - C_Cpp.refreshCppSshTargetsView
  // - C_Cpp.removeSshTarget
  // - C_Cpp.selectActiveSshTarget
  // - C_Cpp.selectSshTarget
  // - C_Cpp.setActiveSshTarget
  // - C_Cpp.sshTerminal
  // - CppReferencesView.focus
  // - CppReferencesView.resetViewLocation
  // - CppSshTargetsView.focus
  // - CppSshTargetsView.resetViewLocation
  // - acceptSelectedSuggestionOnEnter
  // - acceptSnippet
  // - actions.findWithSelection
  // - addRootFolder
  // - audioCues.help
  // - bazel.buildAll
  // - bazel.buildAllRecursive
  // - bazel.buildTarget
  // - bazel.buildTargetWithDebugging
  // - bazel.clean
  // - bazel.copyTargetToClipboard
  // - bazel.getTargetOutput
  // - bazel.refreshBazelBuildTargets
  // - bazel.testAll
  // - bazel.testAllRecursive
  // - bazel.testTarget
  // - bazelWorkspace.focus
  // - bazelWorkspace.resetViewLocation
  // - breadcrumbs.toggle
  // - breadcrumbs.toggleFromEditorTitle
  // - callStack.collapse
  // - changeEditorIndentation
  // - cleanSearchEditorState
  // - closeReferenceSearchEditor
  // - cmake.activeFolderName
  // - cmake.activeFolderPath
  // - cmake.addBuildPreset
  // - cmake.addConfigurePreset
  // - cmake.addTestPreset
  // - cmake.buildAll
  // - cmake.buildNamedTarget
  // - cmake.clean
  // - cmake.cleanAll
  // - cmake.cleanConfigure
  // - cmake.cleanConfigureAll
  // - cmake.cleanRebuild
  // - cmake.cleanRebuildAll
  // - cmake.compileFile
  // - cmake.configure
  // - cmake.configureAll
  // - cmake.ctest
  // - cmake.ctestAll
  // - cmake.debugTargetAll
  // - cmake.editCache
  // - cmake.editCacheUI
  // - cmake.editKits
  // - cmake.install
  // - cmake.installAll
  // - cmake.launchTargetAll
  // - cmake.logDiagnostics
  // - cmake.onlineHelp
  // - cmake.openCMakePresets
  // - cmake.outline.build
  // - cmake.outline.buildAll
  // - cmake.outline.buildTarget
  // - cmake.outline.clean
  // - cmake.outline.cleanAll
  // - cmake.outline.cleanConfigure
  // - cmake.outline.cleanConfigureAll
  // - cmake.outline.cleanRebuild
  // - cmake.outline.cleanRebuildAll
  // - cmake.outline.compileFile
  // - cmake.outline.configure
  // - cmake.outline.configureAll
  // - cmake.outline.debugTarget
  // - cmake.outline.editCacheUI
  // - cmake.outline.focus
  // - cmake.outline.launchTarget
  // - cmake.outline.resetViewLocation
  // - cmake.outline.revealInCMakeLists
  // - cmake.outline.runUtilityTarget
  // - cmake.outline.selectWorkspace
  // - cmake.outline.setDefaultTarget
  // - cmake.outline.setLaunchTarget
  // - cmake.outline.stop
  // - cmake.outline.stopAll
  // - cmake.quickStart
  // - cmake.resetState
  // - cmake.scanForCompilers
  // - cmake.scanForKits
  // - cmake.selectActiveFolder
  // - cmake.selectBuildPreset
  // - cmake.selectConfigurePreset
  // - cmake.selectKit
  // - cmake.selectLaunchTarget
  // - cmake.selectTestPreset
  // - cmake.setDefaultTarget
  // - cmake.setVariant
  // - cmake.setVariantAll
  // - cmake.showBuildCommand
  // - cmake.showConfigureCommand
  // - cmake.stop
  // - cmake.stopAll
  // - cmake.viewLog
  // - codelens.showLensesInCurrentLine
  // - columnSelect
  // - comments.collapse
  // - compareFiles
  // - compareSelected
  // - compositionEnd
  // - compositionStart
  // - compositionType
  // - configureExtensionsAutoUpdate.all
  // - configureExtensionsAutoUpdate.enabled
  // - configureExtensionsAutoUpdate.none
  // - cpptools.activeConfigCustomVariable
  // - cpptools.activeConfigName
  // - cpptools.setActiveConfigName
  // - createCursor
  // - cursorLineEnd
  // - cursorLineEndSelect
  // - cursorLineStart
  // - cursorLineStartSelect
  // - cursorRedo
  // - cursorWordAccessibilityLeft
  // - cursorWordAccessibilityLeftSelect
  // - cursorWordAccessibilityRight
  // - cursorWordAccessibilityRightSelect
  // - cursorWordEndLeft
  // - cursorWordEndLeftSelect
  // - cursorWordPartLeft
  // - cursorWordPartLeftSelect
  // - cursorWordPartRight
  // - cursorWordPartRightSelect
  // - cursorWordPartStartLeft
  // - cursorWordPartStartLeftSelect
  // - cursorWordRight
  // - cursorWordRightSelect
  // - cursorWordStartLeft
  // - cursorWordStartLeftSelect
  // - cursorWordStartRight
  // - cursorWordStartRightSelect
  // - cut
  // - debug.action.toggleDisassemblyViewSourceCode
  // - debug.addConfiguration
  // - debug.addToWatchExpressions
  // - debug.breakWhenValueChanges
  // - debug.breakWhenValueIsAccessed
  // - debug.breakWhenValueIsRead
  // - debug.collapseRepl
  // - debug.copyEvaluatePath
  // - debug.copyStackTrace
  // - debug.editBreakpoint
  // - debug.editFunctionBreakpoint
  // - debug.editFunctionBreakpointHitCount
  // - debug.enableOrDisableBreakpoint
  // - debug.installAdditionalDebuggers
  // - debug.jumpToCursor
  // - debug.replCopy
  // - debug.replPaste
  // - debug.setWatchExpression
  // - debug.startFromConfig
  // - debug.toggleReplIgnoreFocus
  // - default:compositionEnd
  // - default:compositionStart
  // - default:compositionType
  // - default:cut
  // - default:paste
  // - default:redo
  // - default:replacePreviousChar
  // - default:type
  // - default:undo
  // - deleteAllLeft
  // - deleteAllRight
  // - deleteInsideWord
  // - deleteWordEndLeft
  // - deleteWordEndRight
  // - deleteWordPartLeft
  // - deleteWordPartRight
  // - deleteWordStartLeft
  // - deleteWordStartRight
  // - detailsContainers.focus
  // - detailsContainers.resetViewLocation
  // - devVolumes.focus
  // - devVolumes.resetViewLocation
  // - editor.action.addCursorsToBottom
  // - editor.action.addCursorsToTop
  // - editor.action.addSelectionToPreviousFindMatch
  // - editor.action.changeTabDisplaySize
  // - editor.action.clipboardCopyWithSyntaxHighlightingAction
  // - editor.action.detectIndentation
  // - editor.action.duplicateSelection
  // - editor.action.findReferences
  // - editor.action.fixAll
  // - editor.action.focusNextCursor
  // - editor.action.focusPreviousCursor
  // - editor.action.fontZoomIn
  // - editor.action.fontZoomOut
  // - editor.action.fontZoomReset
  // - editor.action.forceRetokenize
  // - editor.action.format
  // - editor.action.formatChanges
  // - editor.action.formatDocument.multiple
  // - editor.action.formatSelection.multiple
  // - editor.action.goToDeclaration
  // - editor.action.goToSelectionAnchor
  // - editor.action.goToTypeDefinition
  // - editor.action.indentUsingSpaces
  // - editor.action.indentUsingTabs
  // - editor.action.indentationToSpaces
  // - editor.action.indentationToTabs
  // - editor.action.inlineSuggest.acceptNextWord
  // - editor.action.inlineSuggest.trigger
  // - editor.action.insertSnippet
  // - editor.action.inspectTMScopes
  // - editor.action.joinLines
  // - editor.action.measureExtHostLatency
  // - editor.action.moveCarretLeftAction
  // - editor.action.moveCarretRightAction
  // - editor.action.moveSelectionToPreviousFindMatch
  // - editor.action.openDeclarationToTheSide
  // - editor.action.openLink
  // - editor.action.peekDeclaration
  // - editor.action.peekTypeDefinition
  // - editor.action.previewDeclaration
  // - editor.action.refactor.preview
  // - editor.action.referenceSearch.trigger
  // - editor.action.reindentlines
  // - editor.action.reindentselectedlines
  // - editor.action.removeDuplicateLines
  // - editor.action.resetSuggestSize
  // - editor.action.revealDeclaration
  // - editor.action.selectToBracket
  // - editor.action.selectionClipboardPaste
  // - editor.action.showDefinitionPreviewHover
  // - editor.action.showReferences
  // - editor.action.showSnippets
  // - editor.action.smartSelect.grow
  // - editor.action.sortLinesAscending
  // - editor.action.sortLinesDescending
  // - editor.action.sourceAction
  // - editor.action.startDebugTextMate
  // - editor.action.surroundWithSnippet
  // - editor.action.toggleColumnSelection
  // - editor.action.toggleMinimap
  // - editor.action.toggleRenderControlCharacter
  // - editor.action.toggleRenderWhitespace
  // - editor.action.toggleScreenReaderAccessibilityMode
  // - editor.action.toggleStickyScroll
  // - editor.action.transformToKebabcase
  // - editor.action.transformToLowercase
  // - editor.action.transformToSnakecase
  // - editor.action.transformToTitlecase
  // - editor.action.transformToUppercase
  // - editor.action.transpose
  // - editor.action.transposeLetters
  // - editor.action.unicodeHighlight.disableHighlightingOfAmbiguousCharacters
  // - editor.action.unicodeHighlight.disableHighlightingOfInvisibleCharacters
  // - editor.action.unicodeHighlight.disableHighlightingOfNonBasicAsciiCharacters
  // - editor.action.unicodeHighlight.showExcludeOptions
  // - editor.action.wordHighlight.trigger
  // - editor.actions.findWithArgs
  // - editor.debug.action.addLogPoint
  // - editor.debug.action.conditionalBreakpoint
  // - editor.debug.action.goToNextBreakpoint
  // - editor.debug.action.goToPreviousBreakpoint
  // - editor.debug.action.openDisassemblyView
  // - editor.debug.action.runToCursor
  // - editor.debug.action.selectionToRepl
  // - editor.debug.action.selectionToWatch
  // - editor.debug.action.stepIntoTargets
  // - editor.emmet.action.balanceIn
  // - editor.emmet.action.balanceOut
  // - editor.emmet.action.decrementNumberByOne
  // - editor.emmet.action.decrementNumberByOneTenth
  // - editor.emmet.action.decrementNumberByTen
  // - editor.emmet.action.evaluateMathExpression
  // - editor.emmet.action.incrementNumberByOne
  // - editor.emmet.action.incrementNumberByOneTenth
  // - editor.emmet.action.incrementNumberByTen
  // - editor.emmet.action.matchTag
  // - editor.emmet.action.mergeLines
  // - editor.emmet.action.nextEditPoint
  // - editor.emmet.action.prevEditPoint
  // - editor.emmet.action.reflectCSSValue
  // - editor.emmet.action.removeTag
  // - editor.emmet.action.selectNextItem
  // - editor.emmet.action.selectPrevItem
  // - editor.emmet.action.splitJoinTag
  // - editor.emmet.action.toggleComment
  // - editor.emmet.action.updateImageSize
  // - editor.emmet.action.updateTag
  // - editor.emmet.action.wrapWithAbbreviation
  // - editor.gotoNextFold
  // - editor.gotoParentFold
  // - editor.gotoPreviousFold
  // - editor.inlayHints.Reset
  // - editor.showTypeHierarchy
  // - emmet.expandAbbreviation
  // - evenBetterToml.copyAsJson
  // - evenBetterToml.copyAsToml
  // - evenBetterToml.pasteAsJson
  // - evenBetterToml.pasteAsToml
  // - evenBetterToml.selectSchema
  // - explorer.download
  // - explorer.newFile
  // - explorer.newFolder
  // - explorer.openWith
  // - explorer.upload
  // - extension.bisect.next
  // - extension.bisect.start
  // - extension.bisect.stop
  // - extension.js-debug.addCustomBreakpoints
  // - extension.js-debug.callers.add
  // - extension.js-debug.callers.goToCaller
  // - extension.js-debug.callers.gotToTarget
  // - extension.js-debug.callers.remove
  // - extension.js-debug.callers.removeAll
  // - extension.js-debug.createDebuggerTerminal
  // - extension.js-debug.createDiagnostics
  // - extension.js-debug.debugLink
  // - extension.js-debug.disableSourceMapStepping
  // - extension.js-debug.enableSourceMapStepping
  // - extension.js-debug.getDiagnosticLogs
  // - extension.js-debug.npmScript
  // - extension.js-debug.openEdgeDevTools
  // - extension.js-debug.prettyPrint
  // - extension.js-debug.removeAllCustomBreakpoints
  // - extension.js-debug.removeCustomBreakpoint
  // - extension.js-debug.revealPage
  // - extension.js-debug.startProfile
  // - extension.js-debug.stopProfile
  // - extension.js-debug.toggleSkippingFile
  // - extension.jsProfileVisualizer.table.clearCodeLenses
  // - extension.node-debug.toggleAutoAttach
  // - extension.open
  // - extension.pickNativeProcess
  // - extension.pickRemoteNativeProcess
  // - extension.pwa-node-debug.attachNodeProcess
  // - extensions.actions.searchByCategory.Azure
  // - extensions.actions.searchByCategory.Data Science
  // - extensions.actions.searchByCategory.Debuggers
  // - extensions.actions.searchByCategory.Education
  // - extensions.actions.searchByCategory.Extension Packs
  // - extensions.actions.searchByCategory.Formatters
  // - extensions.actions.searchByCategory.Keymaps
  // - extensions.actions.searchByCategory.Language Packs
  // - extensions.actions.searchByCategory.Linters
  // - extensions.actions.searchByCategory.Machine Learning
  // - extensions.actions.searchByCategory.Notebooks
  // - extensions.actions.searchByCategory.Other
  // - extensions.actions.searchByCategory.Programming Languages
  // - extensions.actions.searchByCategory.SCM Providers
  // - extensions.actions.searchByCategory.Snippets
  // - extensions.actions.searchByCategory.Testing
  // - extensions.actions.searchByCategory.Themes
  // - extensions.actions.searchByCategory.Visualization
  // - extensions.filter.featured
  // - extensions.recommendedList.focus
  // - extensions.recommendedList.resetViewLocation
  // - extensions.sort.installs
  // - extensions.sort.name
  // - extensions.sort.publishedDate
  // - extensions.sort.rating
  // - extensions.sort.updateDate
  // - files.openTimeline
  // - files.participants.resetChoice
  // - filesExplorer.findInWorkspace
  // - getContextKeyInfo
  // - git-base.api.getRemoteSources
  // - git._syncAll
  // - git.acceptMerge
  // - git.addRemote
  // - git.api.getRemoteSources
  // - git.api.getRepositories
  // - git.api.getRepositoryState
  // - git.branch
  // - git.branchFrom
  // - git.checkout
  // - git.checkoutDetached
  // - git.cherryPick
  // - git.clean
  // - git.cleanAll
  // - git.cleanAllTracked
  // - git.cleanAllUntracked
  // - git.clone
  // - git.cloneRecursive
  // - git.close
  // - git.closeAllDiffEditors
  // - git.commit
  // - git.commitAll
  // - git.commitAllAmend
  // - git.commitAllAmendNoVerify
  // - git.commitAllNoVerify
  // - git.commitAllSigned
  // - git.commitAllSignedNoVerify
  // - git.commitEmpty
  // - git.commitEmptyNoVerify
  // - git.commitMessageAccept
  // - git.commitMessageDiscard
  // - git.commitNoVerify
  // - git.commitStaged
  // - git.commitStagedAmend
  // - git.commitStagedAmendNoVerify
  // - git.commitStagedNoVerify
  // - git.commitStagedSigned
  // - git.commitStagedSignedNoVerify
  // - git.createTag
  // - git.deleteBranch
  // - git.deleteTag
  // - git.fetch
  // - git.fetchAll
  // - git.fetchPrune
  // - git.ignore
  // - git.init
  // - git.manageUnsafeRepositories
  // - git.merge
  // - git.mergeAbort
  // - git.openAllChanges
  // - git.openChange
  // - git.openFile
  // - git.openFile2
  // - git.openHEADFile
  // - git.openMergeEditor
  // - git.openRepository
  // - git.openResource
  // - git.publish
  // - git.pull
  // - git.pullFrom
  // - git.pullRebase
  // - git.push
  // - git.pushForce
  // - git.pushTags
  // - git.pushTo
  // - git.pushToForce
  // - git.pushWithTags
  // - git.pushWithTagsForce
  // - git.rebase
  // - git.rebaseAbort
  // - git.refresh
  // - git.removeRemote
  // - git.rename
  // - git.renameBranch
  // - git.restoreCommitTemplate
  // - git.revealFileInOS.linux
  // - git.revealFileInOS.mac
  // - git.revealFileInOS.windows
  // - git.revealInExplorer
  // - git.revertChange
  // - git.runGitMerge
  // - git.runGitMergeDiff3
  // - git.showOutput
  // - git.stage
  // - git.stageAll
  // - git.stageAllMerge
  // - git.stageAllTracked
  // - git.stageAllUntracked
  // - git.stageChange
  // - git.stash
  // - git.stashApply
  // - git.stashApplyLatest
  // - git.stashDrop
  // - git.stashDropAll
  // - git.stashIncludeUntracked
  // - git.stashPop
  // - git.stashPopLatest
  // - git.sync
  // - git.syncRebase
  // - git.timeline.compareWithSelected
  // - git.timeline.copyCommitId
  // - git.timeline.copyCommitMessage
  // - git.timeline.openDiff
  // - git.timeline.selectForCompare
  // - git.undoCommit
  // - git.unstage
  // - git.unstageAll
  // - github.copyVscodeDevLink
  // - github.copyVscodeDevLinkFile
  // - github.openOnVscodeDev
  // - github.publish
  // - go.add.package.workspace
  // - go.add.tags
  // - go.apply.coverprofile
  // - go.benchmark.cursor
  // - go.benchmark.file
  // - go.benchmark.package
  // - go.browse.packages
  // - go.build.package
  // - go.build.workspace
  // - go.debug.cursor
  // - go.debug.previous
  // - go.debug.subtest.cursor
  // - go.environment.choose
  // - go.explorer.focus
  // - go.explorer.open
  // - go.explorer.refresh
  // - go.explorer.resetViewLocation
  // - go.extractServerChannel
  // - go.fill.struct
  // - go.get.package
  // - go.global.resetState
  // - go.godoctor.extract
  // - go.godoctor.var
  // - go.gopath
  // - go.goroot
  // - go.impl.cursor
  // - go.import.add
  // - go.install.package
  // - go.languageserver.restart
  // - go.lint.package
  // - go.lint.workspace
  // - go.locate.tools
  // - go.playground
  // - go.remove.tags
  // - go.run.modinit
  // - go.show.commands
  // - go.subtest.cursor
  // - go.survey.resetConfig
  // - go.survey.showConfig
  // - go.test.cancel
  // - go.test.captureProfile
  // - go.test.coverage
  // - go.test.cursor
  // - go.test.cursorOrPrevious
  // - go.test.deleteProfile
  // - go.test.file
  // - go.test.generate.file
  // - go.test.generate.function
  // - go.test.generate.package
  // - go.test.package
  // - go.test.previous
  // - go.test.profile.focus
  // - go.test.profile.resetViewLocation
  // - go.test.refresh
  // - go.test.showProfileFile
  // - go.test.showProfiles
  // - go.test.workspace
  // - go.toggle.gc_details
  // - go.toggle.test.file
  // - go.tools.install
  // - go.vet.package
  // - go.vet.workspace
  // - go.vulncheck.toggle
  // - go.welcome
  // - go.workspace.editEnv
  // - go.workspace.resetEnv
  // - go.workspace.resetState
  // - goToNextReferenceFromEmbeddedEditor
  // - goToPreviousReferenceFromEmbeddedEditor
  // - help.tweetFeedback
  // - imagePreview.zoomIn
  // - imagePreview.zoomOut
  // - inlayHints.startReadingLineWithHint
  // - interactive.history.focus
  // - interactive.input.clear
  // - interactive.input.focus
  // - ipynb.cleanInvalidImageAttachment
  // - ipynb.newUntitledIpynb
  // - ipynb.openIpynbInNotebookEditor
  // - java.action.changeBaseType
  // - java.action.navigateToSuperImplementation
  // - java.action.showClassHierarchy
  // - java.action.showSubtypeHierarchy
  // - java.action.showSupertypeHierarchy
  // - java.action.showTypeHierarchy
  // - java.clean.workspace
  // - java.open.clientLog
  // - java.open.formatter.settings
  // - java.open.logs
  // - java.open.serverLog
  // - java.open.serverStderrLog
  // - java.open.serverStdoutLog
  // - java.project.addToSourcePath.command
  // - java.project.build
  // - java.project.createModuleInfo.command
  // - java.project.import.command
  // - java.project.listSourcePaths.command
  // - java.project.removeFromSourcePath.command
  // - java.project.updateSourceAttachment.command
  // - java.server.mode.switch
  // - java.show.server.task.status
  // - javascript.goToProjectConfig
  // - javascript.reloadProjects
  // - javascript.removeUnusedImports
  // - javascript.sortImports
  // - jsBrowserBreakpoints.focus
  // - jsBrowserBreakpoints.resetViewLocation
  // - jsExcludedCallers.focus
  // - jsExcludedCallers.resetViewLocation
  // - json.clearCache
  // - keybindings.editor.clearSearchHistory
  // - keybindings.editor.copyCommandKeybindingEntry
  // - keybindings.editor.copyCommandTitle
  // - keybindings.editor.resetKeybinding
  // - keybindings.editor.showConflicts
  // - keybindings.editor.showDefaultKeybindings
  // - keybindings.editor.showExtensionKeybindings
  // - keybindings.editor.showUserKeybindings
  // - lastCursorLineSelect
  // - lastCursorLineSelectDrag
  // - lastCursorWordSelect
  // - layoutEditorGroups
  // - lineBreakInsert
  // - list.collapseAllToFocus
  // - list.focusParent
  // - list.scrollLeft
  // - list.scrollRight
  // - list.selectAndPreserveFocus
  // - list.toggleFilterOnType
  // - list.toggleFindMode
  // - list.toggleKeyboardNavigation
  // - list.triggerTypeNavigation
  // - makefile.buildAll
  // - makefile.buildCleanAll
  // - makefile.buildCleanTarget
  // - makefile.buildTarget
  // - makefile.cleanConfigure
  // - makefile.configure
  // - makefile.launchDebug
  // - makefile.launchRun
  // - makefile.outline.buildCleanTarget
  // - makefile.outline.buildTarget
  // - makefile.outline.cleanConfigure
  // - makefile.outline.configure
  // - makefile.outline.focus
  // - makefile.outline.launchDebug
  // - makefile.outline.launchRun
  // - makefile.outline.preConfigure
  // - makefile.outline.resetViewLocation
  // - makefile.outline.setBuildConfiguration
  // - makefile.outline.setBuildTarget
  // - makefile.outline.setLaunchConfiguration
  // - makefile.preConfigure
  // - makefile.resetState
  // - makefile.setBuildConfiguration
  // - makefile.setBuildTarget
  // - makefile.setLaunchConfiguration
  // - markdown.api.reloadPlugins
  // - markdown.api.render
  // - markdown.editor.insertImageFromWorkspace
  // - markdown.editor.insertLinkFromWorkspace
  // - markdown.extension.editing._wrapBy
  // - markdown.extension.editing.toggleCodeBlock
  // - markdown.extension.editing.toggleCodeSpan
  // - markdown.extension.editing.toggleList
  // - markdown.extension.editing.toggleMathReverse
  // - markdown.extension.printToHtml
  // - markdown.extension.printToHtmlBatch
  // - markdown.extension.toc.addSecNumbers
  // - markdown.extension.toc.create
  // - markdown.extension.toc.removeSecNumbers
  // - markdown.extension.toc.update
  // - markdown.findAllFileReferences
  // - markdown.preview.refresh
  // - markdown.preview.toggleLock
  // - markdown.showLockedPreviewToSide
  // - markdown.showPreviewSecuritySelector
  // - markdown.showSource
  // - material-icon-theme.activateIcons
  // - material-icon-theme.changeFolderColor
  // - material-icon-theme.changeFolderTheme
  // - material-icon-theme.changeOpacity
  // - material-icon-theme.changeSaturation
  // - material-icon-theme.restoreDefaultConfig
  // - material-icon-theme.toggleExplorerArrows
  // - material-icon-theme.toggleGrayscale
  // - material-icon-theme.toggleIconPacks
  // - menu.resetHiddenStates
  // - merge-conflict.accept.all-both
  // - merge-conflict.accept.all-current
  // - merge-conflict.accept.all-incoming
  // - merge-conflict.accept.both
  // - merge-conflict.accept.current
  // - merge-conflict.accept.incoming
  // - merge-conflict.accept.selection
  // - merge-conflict.compare
  // - merge-conflict.next
  // - merge-conflict.previous
  // - merge.acceptAllInput1
  // - merge.acceptAllInput2
  // - merge.columnLayout
  // - merge.dev.copyContentsJson
  // - merge.dev.loadContentsFromFolder
  // - merge.dev.openContentsJson
  // - merge.dev.openSelectionInTemporaryMergeEditor
  // - merge.dev.saveContentsToFolder
  // - merge.goToNextUnhandledConflict
  // - merge.goToPreviousUnhandledConflict
  // - merge.mixedLayout
  // - merge.openBaseEditor
  // - merge.openResult
  // - merge.showBase
  // - merge.showBaseCenter
  // - merge.showBaseTop
  // - merge.showNonConflictingChanges
  // - merge.toggleActiveConflictInput1
  // - merge.toggleActiveConflictInput2
  // - mergeEditor.acceptMerge
  // - mergeEditor.compareInput1WithBase
  // - mergeEditor.compareInput2WithBase
  // - mergeEditor.resetCloseWithConflictsChoice
  // - mergeEditor.resetResultToBaseAndAutoMerge
  // - noop
  // - notebook.cancelExecution
  // - notebook.cell.cancelExecution
  // - notebook.cell.changeLanguage
  // - notebook.cell.collapseAllCellInputs
  // - notebook.cell.collapseAllCellOutputs
  // - notebook.cell.copy
  // - notebook.cell.cut
  // - notebook.cell.executeAndFocusContainer
  // - notebook.cell.executeCellAndBelow
  // - notebook.cell.executeCellsAbove
  // - notebook.cell.expandAllCellInputs
  // - notebook.cell.expandAllCellOutputs
  // - notebook.cell.insertCodeCellAboveAndFocusContainer
  // - notebook.cell.insertCodeCellAtTop
  // - notebook.cell.insertCodeCellBelowAndFocusContainer
  // - notebook.cell.insertMarkdownCellAbove
  // - notebook.cell.insertMarkdownCellAtTop
  // - notebook.cell.insertMarkdownCellBelow
  // - notebook.cell.paste
  // - notebook.cell.toggleLineNumbers
  // - notebook.cell.toggleOutputs
  // - notebook.clearAllCellsOutputs
  // - notebook.clearNotebookEdtitorTypeCache
  // - notebook.clearNotebookKernelsMRUCache
  // - notebook.diff.cell.revertInput
  // - notebook.diff.cell.revertMetadata
  // - notebook.diff.cell.revertOutputs
  // - notebook.diff.cell.switchOutputRenderingStyleToText
  // - notebook.diff.showMetadata
  // - notebook.diff.showOutputs
  // - notebook.diff.switchToText
  // - notebook.execute
  // - notebook.inspectLayout
  // - notebook.interruptExecution
  // - notebook.renderAllMarkdownCells
  // - notebook.revealLastFailedCell
  // - notebook.revealRunningCell
  // - notebook.saveMimeTypeOrder
  // - notebook.setProfile
  // - notebook.toggleCellToolbarPosition
  // - notebook.toggleCellToolbarPositionFromEditorTitle
  // - notebook.toggleLayoutTroubleshoot
  // - notebook.toggleLineNumbers
  // - notebook.toggleLineNumbersFromEditorTitle
  // - notifications.clearAll
  // - notifications.focusToasts
  // - notifications.showList
  // - notifications.toggleDoNotDisturbMode
  // - notifications.toggleList
  // - npm.debugScript
  // - npm.debugScriptFromHover
  // - npm.focus
  // - npm.openScript
  // - npm.packageManager
  // - npm.refresh
  // - npm.removeView
  // - npm.resetViewLocation
  // - npm.runInstall
  // - npm.runScript
  // - npm.runScriptFromFolder
  // - npm.runScriptFromHover
  // - npm.runSelectedScript
  // - npm.toggleVisibility
  // - openEditors.closeAll
  // - openEditors.newUntitledFile
  // - openInTerminal
  // - openReference
  // - opensshremotes.addNewSshHost
  // - opensshremotes.cleanCurrentRemoteServer
  // - opensshremotes.cleanDevBox
  // - opensshremotes.cleanLocalServer
  // - opensshremotes.cleanRemoteServer
  // - opensshremotes.getHelp
  // - opensshremotes.getStarted
  // - opensshremotes.openConfigFile
  // - opensshremotes.openEmptyWindow
  // - opensshremotes.openEmptyWindowInCurrentWindow
  // - opensshremotes.openEmptyWindowOnCurrentHost
  // - opensshremotes.openWebUI
  // - opensshremotes.provideFeedback
  // - opensshremotes.reportIssue
  // - opensshremotes.settings
  // - opensshremotes.showLog
  // - outline.collapse
  // - outline.expand
  // - outline.filterOnType
  // - outline.focus
  // - outline.followCursor
  // - outline.removeView
  // - outline.resetViewLocation
  // - outline.sortByKind
  // - outline.sortByName
  // - outline.sortByPosition
  // - outline.toggleVisibility
  // - paste
  // - perf.event.profiling
  // - perf.insta.printAsyncCycles
  // - perf.insta.printTraces
  // - perfview.show
  // - platformio-activitybar.quickAccess.focus
  // - platformio-activitybar.quickAccess.removeView
  // - platformio-activitybar.quickAccess.resetViewLocation
  // - platformio-activitybar.quickAccess.toggleVisibility
  // - platformio-debug.disassembly.focus
  // - platformio-debug.disassembly.removeView
  // - platformio-debug.disassembly.resetViewLocation
  // - platformio-debug.disassembly.toggleVisibility
  // - platformio-debug.examineMemory
  // - platformio-debug.memory.clearHistory
  // - platformio-debug.memory.deleteHistoryItem
  // - platformio-debug.memory.focus
  // - platformio-debug.memory.removeView
  // - platformio-debug.memory.resetViewLocation
  // - platformio-debug.memory.toggleVisibility
  // - platformio-debug.peripherals.copyValue
  // - platformio-debug.peripherals.focus
  // - platformio-debug.peripherals.removeView
  // - platformio-debug.peripherals.resetViewLocation
  // - platformio-debug.peripherals.selectedNode
  // - platformio-debug.peripherals.setFormat
  // - platformio-debug.peripherals.toggleVisibility
  // - platformio-debug.peripherals.updateNode
  // - platformio-debug.registers.copyValue
  // - platformio-debug.registers.focus
  // - platformio-debug.registers.removeView
  // - platformio-debug.registers.resetViewLocation
  // - platformio-debug.registers.selectedNode
  // - platformio-debug.registers.setFormat
  // - platformio-debug.registers.toggleVisibility
  // - platformio-debug.setForceDisassembly
  // - platformio-debug.viewDisassembly
  // - platformio-ide.clean
  // - platformio-ide.newTerminal
  // - platformio-ide.openPIOCoreCLI
  // - platformio-ide.privateRunTask
  // - platformio-ide.projectTasks.focus
  // - platformio-ide.projectTasks.resetViewLocation
  // - platformio-ide.rebuildProjectIndex
  // - platformio-ide.refreshProjectTasks
  // - platformio-ide.remoteUpload
  // - platformio-ide.showHome
  // - platformio-ide.startDebugging
  // - platformio-ide.switchProjectEnv
  // - platformio-ide.test
  // - platformio-ide.upgradeCore
  // - problems.action.copyMessage
  // - problems.action.copyRelatedInformationMessage
  // - problems.action.showMultilineMessage
  // - problems.action.showSinglelineMessage
  // - proto3.compile.all
  // - proto3.compile.one
  // - refactorPreview
  // - refactorPreview.discard
  // - refactorPreview.focus
  // - refactorPreview.groupByFile
  // - refactorPreview.groupByType
  // - refactorPreview.resetViewContainerLocation
  // - refactorPreview.resetViewLocation
  // - refactorPreview.toggleGrouping
  // - references-view.clear
  // - references-view.clearHistory
  // - references-view.copy
  // - references-view.copyAll
  // - references-view.copyPath
  // - references-view.findImplementations
  // - references-view.pickFromHistory
  // - references-view.refind
  // - references-view.refresh
  // - references-view.removeCallItem
  // - references-view.removeReferenceItem
  // - references-view.removeTypeItem
  // - references-view.showIncomingCalls
  // - references-view.showOutgoingCalls
  // - references-view.showSubtypes
  // - references-view.showSupertypes
  // - references-view.showTypeHierarchy
  // - references-view.tree.focus
  // - references-view.tree.resetViewLocation
  // - remote-containers.addExtensionToConfig
  // - remote-containers.attachToContainer
  // - remote-containers.attachToContainerNewWindow
  // - remote-containers.attachToK8sContainerFromViewlet
  // - remote-containers.attachToRunningContainer
  // - remote-containers.attachToRunningContainerFromViewlet
  // - remote-containers.checkoutPRInVolume
  // - remote-containers.cloneInVolume
  // - remote-containers.cloneInVolumeFromViewlet
  // - remote-containers.cloneRepositoryInVolumeFromViewlet
  // - remote-containers.configureContainerFeatures
  // - remote-containers.createDevContainer
  // - remote-containers.createDevContainerFile
  // - remote-containers.explorerDetailsRefresh
  // - remote-containers.explorerTargetsRefresh
  // - remote-containers.explorerVolumesRefresh
  // - remote-containers.getHelp
  // - remote-containers.getStarted
  // - remote-containers.inspectDockerResource
  // - remote-containers.inspectInBasicDevContainer
  // - remote-containers.inspectVolume
  // - remote-containers.inspectVolumeFromViewlet
  // - remote-containers.installDocker
  // - remote-containers.installUserCLI
  // - remote-containers.labelPortAndUpdateConfig
  // - remote-containers.newContainer
  // - remote-containers.openAttachConfigByNameFile
  // - remote-containers.openAttachDevContainerFile
  // - remote-containers.openDevContainerFile
  // - remote-containers.openFolder
  // - remote-containers.openLastLogFile
  // - remote-containers.openLogFile
  // - remote-containers.openPullRequestInVolume
  // - remote-containers.openRepositoryFromRemoteHubWithEditSession
  // - remote-containers.openRepositoryInUniqueVolume
  // - remote-containers.openRepositoryInVolume
  // - remote-containers.openWorkspace
  // - remote-containers.provideFeedback
  // - remote-containers.pruneVolumes
  // - remote-containers.rebuildAndReopenInContainer
  // - remote-containers.rebuildContainer
  // - remote-containers.rebuildContainerNoCache
  // - remote-containers.rebuildNoCacheAndReopenInContainer
  // - remote-containers.removeContainer
  // - remote-containers.removeRecentFolder
  // - remote-containers.removeVolume
  // - remote-containers.reopenInContainer
  // - remote-containers.reopenInSSH
  // - remote-containers.reopenInWSL
  // - remote-containers.reopenLocally
  // - remote-containers.reportIssue
  // - remote-containers.revealLogTerminal
  // - remote-containers.revealPostCreateTerminal
  // - remote-containers.settings
  // - remote-containers.showContainerLog
  // - remote-containers.showDetails
  // - remote-containers.showRecoveryContainerNotificationReset
  // - remote-containers.showReopenInContainerNotificationReset
  // - remote-containers.startAndOpenFolder
  // - remote-containers.startContainer
  // - remote-containers.stopContainer
  // - remote-containers.trySample
  // - remote-explorer.add
  // - remote-explorer.configureSsh
  // - remote-explorer.connectToFolderInCurrentWindow
  // - remote-explorer.connectToFolderInNewWindow
  // - remote-explorer.connectToRemoteInCurrentWindow
  // - remote-explorer.connectToRemoteInNewWindow
  // - remote-explorer.deleteFolderHistoryItem
  // - remote-explorer.refresh
  // - remote-explorer.signIntoTunnel
  // - remote-explorer.unregisterTunnel
  // - remote-wsl.explorer.addDistro
  // - remote-wsl.explorer.openDistro
  // - remote-wsl.explorer.openFolder
  // - remote-wsl.explorer.refresh
  // - remote-wsl.explorer.removeFolder
  // - remote-wsl.explorer.setDefaultDistro
  // - remote-wsl.getHelp
  // - remote-wsl.getStarted
  // - remote-wsl.newWindow
  // - remote-wsl.newWindowForDistro
  // - remote-wsl.openFolder
  // - remote-wsl.provideFeedback
  // - remote-wsl.reopenFromRecommendation
  // - remote-wsl.reopenInWSL
  // - remote-wsl.reopenInWindows
  // - remote-wsl.reportIssue
  // - remote-wsl.showLog
  // - remote.explorer.switch
  // - remote.tunnel.changeLocalPort
  // - remote.tunnel.closeCommandPalette
  // - remote.tunnel.copyAddressCommandPalette
  // - remote.tunnel.forwardCommandPalette
  // - remote.tunnel.forwardInline
  // - remote.tunnel.open
  // - remote.tunnel.openCommandPalette
  // - remote.tunnel.openPreview
  // - remote.tunnel.setProtocolHttp
  // - remote.tunnel.setProtocolHttps
  // - remoteTargets.focus
  // - remoteTargets.resetViewLocation
  // - removeRootFolder
  // - repl.action.copyAll
  // - replacePreviousChar
  // - resetGettingStartedProgress
  // - revealInExplorer
  // - rust-analyzer.analyzerStatus
  // - rust-analyzer.cancelFlycheck
  // - rust-analyzer.clearFlycheck
  // - rust-analyzer.copyRunCommandLine
  // - rust-analyzer.debug
  // - rust-analyzer.expandMacro
  // - rust-analyzer.memoryUsage
  // - rust-analyzer.moveItemDown
  // - rust-analyzer.moveItemUp
  // - rust-analyzer.newDebugConfig
  // - rust-analyzer.onEnter
  // - rust-analyzer.openCargoToml
  // - rust-analyzer.openDocs
  // - rust-analyzer.peekTests
  // - rust-analyzer.reload
  // - rust-analyzer.reloadWorkspace
  // - rust-analyzer.run
  // - rust-analyzer.runFlycheck
  // - rust-analyzer.serverVersion
  // - rust-analyzer.shuffleCrateGraph
  // - rust-analyzer.ssr
  // - rust-analyzer.startServer
  // - rust-analyzer.stopServer
  // - rust-analyzer.syntaxTree
  // - rust-analyzer.viewCrateGraph
  // - rust-analyzer.viewFileText
  // - rust-analyzer.viewFullCrateGraph
  // - rust-analyzer.viewHir
  // - rust-analyzer.viewItemTree
  // - saveAll
  // - scm.openInTerminal
  // - scrollEditorBottom
  // - scrollEditorTop
  // - scrollLeft
  // - scrollRight
  // - search.action.clearHistory
  // - search.action.clearSearchResults
  // - search.action.collapseSearchResults
  // - search.action.copyAll
  // - search.action.excludeFromSearch
  // - search.action.expandSearchResults
  // - search.action.focusFilesToExclude
  // - search.action.focusFilesToInclude
  // - search.action.focusSearchList
  // - search.action.openEditor
  // - search.action.openNewEditor
  // - search.action.openNewEditorFromView
  // - search.action.openNewEditorToSide
  // - search.action.refreshSearchResults
  // - search.action.revealInSideBar
  // - search.action.viewAsList
  // - search.action.viewAsTree
  // - selectFirstSuggestion
  // - selectForCompare
  // - selectLastSuggestion
  // - setContext
  // - setRootFolder
  // - setSelection
  // - settings.filterByOnline
  // - settings.filterByTelemetry
  // - settings.filterUntrusted
  // - settings.switchToJSON
  // - showEditorScreenReaderNotification
  // - simpleBrowser.show
  // - targetsContainers.focus
  // - targetsContainers.resetViewLocation
  // - targetsWsl.focus
  // - targetsWsl.resetViewLocation
  // - terminal.focus
  // - terminal.removeView
  // - terminal.resetViewContainerLocation
  // - terminal.resetViewLocation
  // - terminal.toggleVisibility
  // - terraform-ls.module.callers
  // - terraform-ls.module.calls
  // - terraform-ls.module.providers
  // - terraform-ls.module.terraform
  // - terraform-ls.rootmodules
  // - terraform-ls.terraform.init
  // - terraform-ls.terraform.validate
  // - terraform.apply
  // - terraform.disableLanguageServer
  // - terraform.enableLanguageServer
  // - terraform.generateBugReport
  // - terraform.init
  // - terraform.initCurrent
  // - terraform.modules.focus
  // - terraform.modules.openDocumentation
  // - terraform.modules.refreshList
  // - terraform.modules.removeView
  // - terraform.modules.resetViewLocation
  // - terraform.modules.toggleVisibility
  // - terraform.plan
  // - terraform.providers.focus
  // - terraform.providers.openDocumentation
  // - terraform.providers.refreshList
  // - terraform.providers.removeView
  // - terraform.providers.resetViewLocation
  // - terraform.providers.toggleVisibility
  // - terraform.validate
  // - testing.cancelTestRefresh
  // - testing.clearTestResults
  // - testing.collapseAll
  // - testing.configureProfile
  // - testing.debug
  // - testing.debugSelected
  // - testing.hideTest
  // - testing.openMessageInEditor
  // - testing.run
  // - testing.runSelected
  // - testing.runUsing
  // - testing.searchForTestExtension
  // - testing.selectDefaultTestProfiles
  // - testing.sortByDuration
  // - testing.sortByLocation
  // - testing.sortByStatus
  // - testing.unhideAllTests
  // - testing.unhideTest
  // - testing.viewAsList
  // - testing.viewAsTree
  // - timeline.focus
  // - timeline.refresh
  // - timeline.removeView
  // - timeline.resetViewLocation
  // - timeline.toggleExcludeSource:git-history
  // - timeline.toggleExcludeSource:timeline.localHistory
  // - timeline.toggleFollowActiveEditor
  // - timeline.toggleVisibility
  // - toggle.diff.ignoreTrimWhitespace
  // - toggle.diff.renderSideBySide
  // - toggle.window.commandCenter
  // - toggle.workbench.layoutControl.enabled
  // - toggleEscapeSequenceLogging
  // - typescript.findAllFileReferences
  // - typescript.goToProjectConfig
  // - typescript.goToSourceDefinition
  // - typescript.openTsServerLog
  // - typescript.reloadProjects
  // - typescript.removeUnusedImports
  // - typescript.restartTsServer
  // - typescript.selectTypeScriptVersion
  // - typescript.sortImports
  // - update.check
  // - update.checkForUpdate
  // - update.checking
  // - update.downloadNow
  // - update.downloadUpdate
  // - update.downloading
  // - update.install
  // - update.installUpdate
  // - update.restart
  // - update.restartToUpdate
  // - update.showCurrentReleaseNotes
  // - update.updating
  // - userDataProfiles
  // - userDataProfiles.resetViewContainerLocation
  // - variables.collapse
  // - vscodeMarkdownLanguageservice.open
  // - vscodeMarkdownLanguageservice.rename
  // - walkthroughs.selectStep
  // - watch.collapse
  // - welcome.markStepComplete
  // - welcome.markStepIncomplete
  // - welcome.showAllWalkthroughs
  // - workbench.action.acceptSelectedQuickOpenItem
  // - workbench.action.addComment
  // - workbench.action.addRootFolder
  // - workbench.action.alignPanelCenter
  // - workbench.action.alignPanelJustify
  // - workbench.action.alignPanelLeft
  // - workbench.action.alignPanelRight
  // - workbench.action.alternativeAcceptSelectedQuickOpenItem
  // - workbench.action.blur
  // - workbench.action.clearCommandHistory
  // - workbench.action.clearEditorHistory
  // - workbench.action.clearLocalePreference
  // - workbench.action.clearRecentFiles
  // - workbench.action.closeActivePinnedEditor
  // - workbench.action.closeAuxiliaryBar
  // - workbench.action.closeEditorInAllGroups
  // - workbench.action.closeEditorsAndGroup
  // - workbench.action.closeEditorsInOtherGroups
  // - workbench.action.closeEditorsToTheLeft
  // - workbench.action.closeEditorsToTheRight
  // - workbench.action.closeOtherEditors
  // - workbench.action.closePanel
  // - workbench.action.closeSidebar
  // - workbench.action.collapseAllComments
  // - workbench.action.compareEditor.focusOtherSide
  // - workbench.action.compareEditor.focusPrimarySide
  // - workbench.action.compareEditor.focusSecondarySide
  // - workbench.action.configureLanguageBasedSettings
  // - workbench.action.configureLocale
  // - workbench.action.configureRuntimeArguments
  // - workbench.action.createTerminalEditor
  // - workbench.action.createTerminalEditorSide
  // - workbench.action.customizeLayout
  // - workbench.action.debug.callStackBottom
  // - workbench.action.debug.callStackDown
  // - workbench.action.debug.callStackTop
  // - workbench.action.debug.callStackUp
  // - workbench.action.debug.configure
  // - workbench.action.debug.disconnectAndSuspend
  // - workbench.action.debug.focusProcess
  // - workbench.action.debug.restartFrame
  // - workbench.action.debug.reverseContinue
  // - workbench.action.debug.selectDebugConsole
  // - workbench.action.debug.selectDebugSession
  // - workbench.action.debug.selectRepl
  // - workbench.action.debug.selectandstart
  // - workbench.action.debug.showLoadedScripts
  // - workbench.action.debug.stepBack
  // - workbench.action.debug.terminateThread
  // - workbench.action.decreaseViewHeight
  // - workbench.action.decreaseViewSize
  // - workbench.action.decreaseViewWidth
  // - workbench.action.download
  // - workbench.action.duplicateActiveEditorGroupDown
  // - workbench.action.duplicateActiveEditorGroupLeft
  // - workbench.action.duplicateActiveEditorGroupRight
  // - workbench.action.duplicateActiveEditorGroupUp
  // - workbench.action.duplicateWorkspaceInNewWindow
  // - workbench.action.editor.changeEOL
  // - workbench.action.editor.changeEncoding
  // - workbench.action.editorLayoutSingle
  // - workbench.action.editorLayoutThreeColumns
  // - workbench.action.editorLayoutThreeRows
  // - workbench.action.editorLayoutTwoByTwoGrid
  // - workbench.action.editorLayoutTwoColumns
  // - workbench.action.editorLayoutTwoColumnsBottom
  // - workbench.action.editorLayoutTwoRows
  // - workbench.action.editorLayoutTwoRowsRight
  // - workbench.action.evenEditorWidths
  // - workbench.action.expandAllComments
  // - workbench.action.extensionHostProfiler.stop
  // - workbench.action.files.newFile
  // - workbench.action.files.openFileFolderInNewWindow
  // - workbench.action.files.openFileInNewWindow
  // - workbench.action.files.openFolderInNewWindow
  // - workbench.action.files.revert
  // - workbench.action.files.saveAll
  // - workbench.action.files.saveFiles
  // - workbench.action.firstEditorInGroup
  // - workbench.action.focusAboveGroupWithoutWrap
  // - workbench.action.focusActiveEditorGroup
  // - workbench.action.focusActivityBar
  // - workbench.action.focusAuxiliaryBar
  // - workbench.action.focusBanner
  // - workbench.action.focusBelowGroupWithoutWrap
  // - workbench.action.focusCommentsPanel
  // - workbench.action.focusFirstSideEditor
  // - workbench.action.focusLastEditorGroup
  // - workbench.action.focusLeftGroupWithoutWrap
  // - workbench.action.focusNextGroup
  // - workbench.action.focusOtherSideEditor
  // - workbench.action.focusPanel
  // - workbench.action.focusPreviousGroup
  // - workbench.action.focusQuickOpen
  // - workbench.action.focusRightGroupWithoutWrap
  // - workbench.action.focusSecondSideEditor
  // - workbench.action.focusStatusBar
  // - workbench.action.focusTitleBar
  // - workbench.action.generateColorTheme
  // - workbench.action.increaseViewHeight
  // - workbench.action.increaseViewSize
  // - workbench.action.increaseViewWidth
  // - workbench.action.inspectContextKeys
  // - workbench.action.inspectKeyMappings
  // - workbench.action.inspectKeyMappingsJSON
  // - workbench.action.joinAllGroups
  // - workbench.action.joinTwoGroups
  // - workbench.action.localHistory.compareWithFile
  // - workbench.action.localHistory.compareWithPrevious
  // - workbench.action.localHistory.compareWithSelected
  // - workbench.action.localHistory.create
  // - workbench.action.localHistory.delete
  // - workbench.action.localHistory.deleteAll
  // - workbench.action.localHistory.open
  // - workbench.action.localHistory.rename
  // - workbench.action.localHistory.restore
  // - workbench.action.localHistory.restoreViaEditor
  // - workbench.action.localHistory.restoreViaPicker
  // - workbench.action.localHistory.revealInOS
  // - workbench.action.localHistory.selectForCompare
  // - workbench.action.lockEditorGroup
  // - workbench.action.logStorage
  // - workbench.action.logWorkingCopies
  // - workbench.action.manageTrustedDomain
  // - workbench.action.maximizeEditor
  // - workbench.action.minimizeOtherEditors
  // - workbench.action.moveEditorToAboveGroup
  // - workbench.action.moveEditorToBelowGroup
  // - workbench.action.moveEditorToLeftGroup
  // - workbench.action.moveEditorToRightGroup
  // - workbench.action.moveFocusedView
  // - workbench.action.movePanelToSecondarySideBar
  // - workbench.action.movePanelToSidePanel
  // - workbench.action.moveSecondarySideBarToPanel
  // - workbench.action.moveSideBarLeft
  // - workbench.action.moveSideBarRight
  // - workbench.action.moveSidePanelToPanel
  // - workbench.action.moveView
  // - workbench.action.navigateBackInEditLocations
  // - workbench.action.navigateBackInNavigationLocations
  // - workbench.action.navigateDown
  // - workbench.action.navigateEditorGroups
  // - workbench.action.navigateForwardInEditLocations
  // - workbench.action.navigateForwardInNavigationLocations
  // - workbench.action.navigateLast
  // - workbench.action.navigateLeft
  // - workbench.action.navigatePreviousInEditLocations
  // - workbench.action.navigatePreviousInNavigationLocations
  // - workbench.action.navigateRight
  // - workbench.action.navigateToLastNavigationLocation
  // - workbench.action.navigateUp
  // - workbench.action.newGroupAbove
  // - workbench.action.newGroupBelow
  // - workbench.action.newGroupLeft
  // - workbench.action.newGroupRight
  // - workbench.action.nextPanelView
  // - workbench.action.nextSideBarView
  // - workbench.action.openAccessibilitySettings
  // - workbench.action.openActiveLogOutputFile
  // - workbench.action.openApplicationSettingsJson
  // - workbench.action.openDefaultKeybindingsFile
  // - workbench.action.openDocumentationUrl
  // - workbench.action.openEditorAtIndex
  // - workbench.action.openExtensionLogsFolder
  // - workbench.action.openFolderSettings
  // - workbench.action.openFolderSettingsFile
  // - workbench.action.openGlobalKeybindingsFile
  // - workbench.action.openGlobalSettings
  // - workbench.action.openIssueReporter
  // - workbench.action.openLicenseUrl
  // - workbench.action.openLogFile
  // - workbench.action.openLogsFolder
  // - workbench.action.openNewsletterSignupUrl
  // - workbench.action.openNextRecentlyUsedEditor
  // - workbench.action.openNextRecentlyUsedEditorInGroup
  // - workbench.action.openPreviousEditorFromHistory
  // - workbench.action.openPreviousRecentlyUsedEditor
  // - workbench.action.openPreviousRecentlyUsedEditorInGroup
  // - workbench.action.openPrivacyStatementUrl
  // - workbench.action.openProcessExplorer
  // - workbench.action.openRawDefaultSettings
  // - workbench.action.openRemoteSettings
  // - workbench.action.openRemoteSettingsFile
  // - workbench.action.openRequestFeatureUrl
  // - workbench.action.openSettings2
  // - workbench.action.openSettingsJson
  // - workbench.action.openSnippets
  // - workbench.action.openTipsAndTricksUrl
  // - workbench.action.openTwitterUrl
  // - workbench.action.openVideoTutorialsUrl
  // - workbench.action.openView
  // - workbench.action.openWalkthrough
  // - workbench.action.openWorkspace
  // - workbench.action.openWorkspaceConfigFile
  // - workbench.action.openWorkspaceFromEditor
  // - workbench.action.openWorkspaceInNewWindow
  // - workbench.action.openWorkspaceSettings
  // - workbench.action.openWorkspaceSettingsFile
  // - workbench.action.output.show.editSessionsSyncLog
  // - workbench.action.output.show.extHostLog
  // - workbench.action.output.show.extension-output-hashicorp.terraform-#1-HashiCorp Terraform
  // - workbench.action.output.show.extension-output-ms-vscode.cpptools-#1-remote-attach
  // - workbench.action.output.show.extension-output-vscode.git-#1-Git
  // - workbench.action.output.show.extension-output-vscode.github-authentication-#1-GitHub Authentication
  // - workbench.action.output.show.extension-output-vscode.json-language-features-#1-JSON Language Server
  // - workbench.action.output.show.extension-output-vscode.markdown-language-features-#1-Markdown Language Server
  // - workbench.action.output.show.extension-output-vscode.microsoft-authentication-#1-Microsoft Authentication
  // - workbench.action.output.show.mainLog
  // - workbench.action.output.show.ptyHostLog
  // - workbench.action.output.show.remoteTunnelServiceLog
  // - workbench.action.output.show.rendererLog
  // - workbench.action.output.show.sharedLog
  // - workbench.action.output.show.tasks
  // - workbench.action.output.show.userDataSyncLog
  // - workbench.action.pauseSocketWriting
  // - workbench.action.populateFileFromSnippet
  // - workbench.action.positionPanelBottom
  // - workbench.action.positionPanelLeft
  // - workbench.action.positionPanelRight
  // - workbench.action.previewColorTheme
  // - workbench.action.previousPanelView
  // - workbench.action.previousSideBarView
  // - workbench.action.problems.focus
  // - workbench.action.quickOpenLeastRecentlyUsedEditor
  // - workbench.action.quickOpenNavigateNext
  // - workbench.action.quickOpenNavigateNextInTerminalPicker
  // - workbench.action.quickOpenNavigateNextInViewPicker
  // - workbench.action.quickOpenNavigatePrevious
  // - workbench.action.quickOpenNavigatePreviousInTerminalPicker
  // - workbench.action.quickOpenNavigatePreviousInViewPicker
  // - workbench.action.quickOpenPreviousEditor
  // - workbench.action.quickOpenPreviousRecentlyUsedEditor
  // - workbench.action.quickOpenRecent
  // - workbench.action.quickOpenSelectNext
  // - workbench.action.quickOpenSelectPrevious
  // - workbench.action.quickOpenTerm
  // - workbench.action.quickOpenView
  // - workbench.action.quickOpenWithModes
  // - workbench.action.quickPickManyToggle
  // - workbench.action.quickSwitchWindow
  // - workbench.action.reloadWindowWithExtensionsDisabled
  // - workbench.action.remote.close
  // - workbench.action.remote.extensions
  // - workbench.action.remote.showMenu
  // - workbench.action.removeRootFolder
  // - workbench.action.reopenTextEditor
  // - workbench.action.reopenWithEditor
  // - workbench.action.reportPerformanceIssueUsingReporter
  // - workbench.action.resetFocusedViewLocation
  // - workbench.action.resetViewLocations
  // - workbench.action.restartExtensionHost
  // - workbench.action.revertAndCloseActiveEditor
  // - workbench.action.saveWorkspaceAs
  // - workbench.action.selectIconTheme
  // - workbench.action.selectProductIconTheme
  // - workbench.action.setLogLevel
  // - workbench.action.showAboutDialog
  // - workbench.action.showAllEditorsByMostRecentlyUsed
  // - workbench.action.showEditorsInActiveGroup
  // - workbench.action.showEditorsInGroup
  // - workbench.action.showEmmetCommands
  // - workbench.action.showErrorsWarnings
  // - workbench.action.showInteractivePlayground
  // - workbench.action.showInterfaceOverview
  // - workbench.action.showLogs
  // - workbench.action.showRuntimeExtensions
  // - workbench.action.showWindowLog
  // - workbench.action.splitEditorDown
  // - workbench.action.splitEditorLeft
  // - workbench.action.splitEditorRight
  // - workbench.action.splitEditorToAboveGroup
  // - workbench.action.splitEditorToBelowGroup
  // - workbench.action.splitEditorToFirstGroup
  // - workbench.action.splitEditorToLastGroup
  // - workbench.action.splitEditorToLeftGroup
  // - workbench.action.splitEditorToNextGroup
  // - workbench.action.splitEditorToPreviousGroup
  // - workbench.action.splitEditorToRightGroup
  // - workbench.action.splitEditorUp
  // - workbench.action.stopTracing
  // - workbench.action.switchWindow
  // - workbench.action.tasks.configureDefaultBuildTask
  // - workbench.action.tasks.configureDefaultTestTask
  // - workbench.action.tasks.configureTaskRunner
  // - workbench.action.tasks.manageAutomaticRunning
  // - workbench.action.tasks.openUserTasks
  // - workbench.action.tasks.openWorkspaceFileTasks
  // - workbench.action.tasks.reRunTask
  // - workbench.action.tasks.restartTask
  // - workbench.action.tasks.showLog
  // - workbench.action.tasks.showTasks
  // - workbench.action.tasks.terminate
  // - workbench.action.tasks.test
  // - workbench.action.tasks.toggleProblems
  // - workbench.action.terminal.attachToSession
  // - workbench.action.terminal.changeColor
  // - workbench.action.terminal.changeColorInstance
  // - workbench.action.terminal.changeColorPanel
  // - workbench.action.terminal.changeIcon
  // - workbench.action.terminal.changeIconInstance
  // - workbench.action.terminal.changeIconPanel
  // - workbench.action.terminal.clear
  // - workbench.action.terminal.clearCommandHistory
  // - workbench.action.terminal.copyLastCommand
  // - workbench.action.terminal.copySelectionAsHtml
  // - workbench.action.terminal.detachSession
  // - workbench.action.terminal.focus
  // - workbench.action.terminal.focusAtIndex1
  // - workbench.action.terminal.focusAtIndex2
  // - workbench.action.terminal.focusAtIndex3
  // - workbench.action.terminal.focusAtIndex4
  // - workbench.action.terminal.focusAtIndex5
  // - workbench.action.terminal.focusAtIndex6
  // - workbench.action.terminal.focusAtIndex7
  // - workbench.action.terminal.focusAtIndex8
  // - workbench.action.terminal.focusAtIndex9
  // - workbench.action.terminal.gitCreateProfileButton
  // - workbench.action.terminal.goToRecentDirectory
  // - workbench.action.terminal.join
  // - workbench.action.terminal.joinInstance
  // - workbench.action.terminal.kill
  // - workbench.action.terminal.killAll
  // - workbench.action.terminal.moveToEditor
  // - workbench.action.terminal.moveToEditorInstance
  // - workbench.action.terminal.moveToTerminalPanel
  // - workbench.action.terminal.newInActiveWorkspace
  // - workbench.action.terminal.newWithProfile
  // - workbench.action.terminal.openDetectedLink
  // - workbench.action.terminal.openFileLink
  // - workbench.action.terminal.openSettings
  // - workbench.action.terminal.openUrlLink
  // - workbench.action.terminal.relaunch
  // - workbench.action.terminal.rename
  // - workbench.action.terminal.renamePanel
  // - workbench.action.terminal.resizePaneDown
  // - workbench.action.terminal.resizePaneUp
  // - workbench.action.terminal.runActiveFile
  // - workbench.action.terminal.runRecentCommand
  // - workbench.action.terminal.runSelectedText
  // - workbench.action.terminal.selectAll
  // - workbench.action.terminal.selectDefaultShell
  // - workbench.action.terminal.selectToNextLine
  // - workbench.action.terminal.selectToPreviousLine
  // - workbench.action.terminal.setDimensions
  // - workbench.action.terminal.showEnvironmentInformation
  // - workbench.action.terminal.showTabs
  // - workbench.action.terminal.showTextureAtlas
  // - workbench.action.terminal.sizeToContentWidthInstance
  // - workbench.action.terminal.splitInActiveWorkspace
  // - workbench.action.terminal.switchTerminal
  // - workbench.action.terminal.unsplit
  // - workbench.action.terminal.unsplitInstance
  // - workbench.action.terminal.writeDataToTerminal
  // - workbench.action.toggleActivityBarVisibility
  // - workbench.action.toggleAutoSave
  // - workbench.action.toggleAuxiliaryBar
  // - workbench.action.toggleCenteredLayout
  // - workbench.action.toggleCommenting
  // - workbench.action.toggleConfirmBeforeClose
  // - workbench.action.toggleEditorGroupLock
  // - workbench.action.toggleEditorType
  // - workbench.action.toggleEditorVisibility
  // - workbench.action.toggleEditorWidths
  // - workbench.action.toggleKeepEditors
  // - workbench.action.toggleKeybindingsLog
  // - workbench.action.toggleLightDarkThemes
  // - workbench.action.toggleMaximizedPanel
  // - workbench.action.toggleMenuBar
  // - workbench.action.toggleMultiCursorModifier
  // - workbench.action.toggleNotebookClipboardLog
  // - workbench.action.toggleScreencastMode
  // - workbench.action.toggleSearchOnType
  // - workbench.action.toggleSharedProcess
  // - workbench.action.toggleSidebarPosition
  // - workbench.action.toggleSplitEditorInGroup
  // - workbench.action.toggleSplitEditorInGroupLayout
  // - workbench.action.toggleStatusbarVisibility
  // - workbench.action.toggleTabsVisibility
  // - workbench.action.triggerReconnect
  // - workbench.action.unlockEditorGroup
  // - workbench.action.url.openUrl
  // - workbench.action.webview.openDeveloperTools
  // - workbench.action.webview.reloadWebviewAction
  // - workbench.actions.sync.compareWithLocal
  // - workbench.actions.sync.editMachineName
  // - workbench.actions.sync.replaceCurrent
  // - workbench.actions.sync.resolveResource
  // - workbench.actions.sync.turnOffSyncOnMachine
  // - workbench.actions.syncData.reset
  // - workbench.actions.table.workbench.panel.markers.view.viewAsTable
  // - workbench.actions.table.workbench.panel.markers.view.viewAsTree
  // - workbench.actions.treeView.platformio-debug.disassembly.collapseAll
  // - workbench.actions.treeView.platformio-debug.disassembly.refresh
  // - workbench.actions.treeView.platformio-debug.memory.collapseAll
  // - workbench.actions.treeView.platformio-debug.memory.refresh
  // - workbench.actions.treeView.platformio-debug.peripherals.collapseAll
  // - workbench.actions.treeView.platformio-debug.peripherals.refresh
  // - workbench.actions.treeView.platformio-debug.registers.collapseAll
  // - workbench.actions.treeView.platformio-debug.registers.refresh
  // - workbench.actions.treeView.workbench.panel.markers.view.collapseAll
  // - workbench.actions.view.toggleProblems
  // - workbench.actions.workbench.panel.comments.toggleResolvedComments
  // - workbench.actions.workbench.panel.comments.toggleUnResolvedComments
  // - workbench.actions.workbench.panel.markers.view.toggleActiveFile
  // - workbench.actions.workbench.panel.markers.view.toggleErrors
  // - workbench.actions.workbench.panel.markers.view.toggleExcludedFiles
  // - workbench.actions.workbench.panel.markers.view.toggleInfos
  // - workbench.actions.workbench.panel.markers.view.toggleWarnings
  // - workbench.debug.action.copyAll
  // - workbench.debug.action.focusBreakpointsView
  // - workbench.debug.action.focusCallStackView
  // - workbench.debug.action.focusRepl
  // - workbench.debug.action.focusVariablesView
  // - workbench.debug.action.focusWatchView
  // - workbench.debug.breakPointsView.resetViewLocation
  // - workbench.debug.callStackView.resetViewLocation
  // - workbench.debug.loadedScriptsView.focus
  // - workbench.debug.loadedScriptsView.resetViewLocation
  // - workbench.debug.panel.action.clearReplAction
  // - workbench.debug.variablesView.resetViewLocation
  // - workbench.debug.viewlet.action.addFunctionBreakpointAction
  // - workbench.debug.viewlet.action.addWatchExpression
  // - workbench.debug.viewlet.action.copyValue
  // - workbench.debug.viewlet.action.disableAllBreakpoints
  // - workbench.debug.viewlet.action.enableAllBreakpoints
  // - workbench.debug.viewlet.action.reapplyBreakpointsAction
  // - workbench.debug.viewlet.action.removeAllBreakpoints
  // - workbench.debug.viewlet.action.removeAllWatchExpressions
  // - workbench.debug.viewlet.action.removeBreakpoint
  // - workbench.debug.viewlet.action.toggleBreakpointsActivatedAction
  // - workbench.debug.viewlet.action.viewMemory
  // - workbench.debug.watchExpressionsView.resetViewLocation
  // - workbench.debug.welcome.focus
  // - workbench.debug.welcome.removeView
  // - workbench.debug.welcome.resetViewLocation
  // - workbench.debug.welcome.toggleVisibility
  // - workbench.editSessions.actions.delete
  // - workbench.editSessions.actions.deleteAll
  // - workbench.editSessions.actions.resetAuth
  // - workbench.editSessions.actions.resume
  // - workbench.editSessions.actions.resumeLatest
  // - workbench.editSessions.actions.showEditSessions
  // - workbench.editSessions.actions.showOutputChannel
  // - workbench.editSessions.actions.signIn
  // - workbench.editSessions.actions.store
  // - workbench.editSessions.actions.storeCurrent
  // - workbench.explorer.fileView.focus
  // - workbench.explorer.fileView.removeView
  // - workbench.explorer.fileView.resetViewLocation
  // - workbench.explorer.fileView.toggleVisibility
  // - workbench.explorer.openEditorsView.removeView
  // - workbench.explorer.openEditorsView.resetViewLocation
  // - workbench.explorer.openEditorsView.toggleVisibility
  // - workbench.extensions.action.addExtensionToWorkspaceRecommendations
  // - workbench.extensions.action.addToWorkspaceFolderIgnoredRecommendations
  // - workbench.extensions.action.addToWorkspaceFolderRecommendations
  // - workbench.extensions.action.addToWorkspaceIgnoredRecommendations
  // - workbench.extensions.action.addToWorkspaceRecommendations
  // - workbench.extensions.action.checkForUpdates
  // - workbench.extensions.action.clearExtensionsSearchResults
  // - workbench.extensions.action.clearLanguage
  // - workbench.extensions.action.configure
  // - workbench.extensions.action.configureWorkspaceFolderRecommendedExtensions
  // - workbench.extensions.action.configureWorkspaceRecommendedExtensions
  // - workbench.extensions.action.copyExtension
  // - workbench.extensions.action.copyExtensionId
  // - workbench.extensions.action.debugExtensionHost
  // - workbench.extensions.action.disableAll
  // - workbench.extensions.action.disableAllWorkspace
  // - workbench.extensions.action.disableAutoUpdate
  // - workbench.extensions.action.enableAll
  // - workbench.extensions.action.enableAllWorkspace
  // - workbench.extensions.action.enableAutoUpdate
  // - workbench.extensions.action.extensionHostProfile
  // - workbench.extensions.action.extensionUpdates
  // - workbench.extensions.action.ignoreRecommendation
  // - workbench.extensions.action.install.specificVersion
  // - workbench.extensions.action.installExtensionFromLocation
  // - workbench.extensions.action.installExtensions
  // - workbench.extensions.action.installVSIX
  // - workbench.extensions.action.installWorkspaceRecommendedExtensions
  // - workbench.extensions.action.listBuiltInExtensions
  // - workbench.extensions.action.listWorkspaceUnsupportedExtensions
  // - workbench.extensions.action.manageAuthorizedExtensionURIs
  // - workbench.extensions.action.openExtensionsFolder
  // - workbench.extensions.action.recentlyPublishedExtensions
  // - workbench.extensions.action.refreshExtension
  // - workbench.extensions.action.reinstall
  // - workbench.extensions.action.removeExtensionFromWorkspaceRecommendations
  // - workbench.extensions.action.saveExtensionHostProfile
  // - workbench.extensions.action.setColorTheme
  // - workbench.extensions.action.setFileIconTheme
  // - workbench.extensions.action.setProductIconTheme
  // - workbench.extensions.action.showDisabledExtensions
  // - workbench.extensions.action.showEnabledExtensions
  // - workbench.extensions.action.showExtensionsForLanguage
  // - workbench.extensions.action.showExtensionsWithIds
  // - workbench.extensions.action.showLanguageExtensions
  // - workbench.extensions.action.showPopularExtensions
  // - workbench.extensions.action.showPreReleaseVersion
  // - workbench.extensions.action.showRecommendedExtensions
  // - workbench.extensions.action.showRecommendedKeymapExtensions
  // - workbench.extensions.action.showReleasedVersion
  // - workbench.extensions.action.stopExtensionHostProfile
  // - workbench.extensions.action.switchToPreReleaseVersion
  // - workbench.extensions.action.switchToReleaseVersion
  // - workbench.extensions.action.toggleIgnoreExtension
  // - workbench.extensions.action.undoIgnoredRecommendation
  // - workbench.extensions.action.updateAllExtensions
  // - workbench.extensions.command.installFromVSIX
  // - workbench.extensions.installMissingDependencies
  // - workbench.files.action.acceptLocalChanges
  // - workbench.files.action.collapseExplorerFolders
  // - workbench.files.action.compareFileWith
  // - workbench.files.action.createFileFromExplorer
  // - workbench.files.action.createFolderFromExplorer
  // - workbench.files.action.focusFilesExplorer
  // - workbench.files.action.refreshFilesExplorer
  // - workbench.files.action.revertLocalChanges
  // - workbench.files.action.saveAllInGroup
  // - workbench.files.action.showActiveFileInExplorer
  // - workbench.getCodeExchangeProxyEndpoints
  // - workbench.notebook.layout.configure
  // - workbench.notebook.layout.configure.editorTitle
  // - workbench.notebook.layout.gettingStarted
  // - workbench.notebook.layout.select
  // - workbench.notebook.layout.webview.reset
  // - workbench.output.action.clearOutput
  // - workbench.output.action.switchBetweenOutputs
  // - workbench.output.action.toggleAutoScroll
  // - workbench.panel.markers.resetViewContainerLocation
  // - workbench.panel.markers.view.focus
  // - workbench.panel.markers.view.removeView
  // - workbench.panel.markers.view.resetViewLocation
  // - workbench.panel.markers.view.toggleVisibility
  // - workbench.panel.output.focus
  // - workbench.panel.output.removeView
  // - workbench.panel.output.resetViewContainerLocation
  // - workbench.panel.output.resetViewLocation
  // - workbench.panel.output.toggleVisibility
  // - workbench.panel.repl.resetViewContainerLocation
  // - workbench.panel.repl.view.focus
  // - workbench.panel.repl.view.removeView
  // - workbench.panel.repl.view.resetViewLocation
  // - workbench.panel.repl.view.toggleVisibility
  // - workbench.profiles.actions.cleanupProfiles
  // - workbench.profiles.actions.createEmptyProfile
  // - workbench.profiles.actions.createFromCurrentProfile
  // - workbench.profiles.actions.createProfile
  // - workbench.profiles.actions.createTemporaryProfile
  // - workbench.profiles.actions.deleteProfile
  // - workbench.profiles.actions.exportProfile
  // - workbench.profiles.actions.importProfile
  // - workbench.profiles.actions.manage
  // - workbench.profiles.actions.profileEntry.43bccd86
  // - workbench.profiles.actions.renameCurrentProfile
  // - workbench.profiles.actions.renameProfile
  // - workbench.profiles.actions.resetWorkspaces
  // - workbench.profiles.actions.switchProfile
  // - workbench.profiles.actions.updateCurrentProfileShortName
  // - workbench.remoteTunnel.actions.configure
  // - workbench.remoteTunnel.actions.connecting
  // - workbench.remoteTunnel.actions.copyToClipboard
  // - workbench.remoteTunnel.actions.learnMore
  // - workbench.remoteTunnel.actions.manage
  // - workbench.remoteTunnel.actions.showLog
  // - workbench.remoteTunnel.actions.turnOff
  // - workbench.remoteTunnel.actions.turnOn
  // - workbench.scm.action.collapseAllRepositories
  // - workbench.scm.action.expandAllRepositories
  // - workbench.scm.action.repositories.setSortKey.discoveryTime
  // - workbench.scm.action.repositories.setSortKey.name
  // - workbench.scm.action.repositories.setSortKey.path
  // - workbench.scm.action.setListViewMode
  // - workbench.scm.action.setSortKey.name
  // - workbench.scm.action.setSortKey.path
  // - workbench.scm.action.setSortKey.status
  // - workbench.scm.action.setTreeViewMode
  // - workbench.scm.focus
  // - workbench.scm.removeView
  // - workbench.scm.repositories.focus
  // - workbench.scm.repositories.removeView
  // - workbench.scm.repositories.resetViewLocation
  // - workbench.scm.repositories.toggleVisibility
  // - workbench.scm.resetViewLocation
  // - workbench.scm.toggleVisibility
  // - workbench.trust.configure
  // - workbench.trust.manage
  // - workbench.userData.actions.cancelTurnOn
  // - workbench.userData.actions.openSyncBackupsFolder
  // - workbench.userData.actions.signin
  // - workbench.userData.actions.turningOn
  // - workbench.userDataSync.actions.acceptMerges
  // - workbench.userDataSync.actions.configure
  // - workbench.userDataSync.actions.help
  // - workbench.userDataSync.actions.manage
  // - workbench.userDataSync.actions.settings
  // - workbench.userDataSync.actions.showConflicts
  // - workbench.userDataSync.actions.showLog
  // - workbench.userDataSync.actions.showSyncedData
  // - workbench.userDataSync.actions.syncNow
  // - workbench.userDataSync.actions.turnOff
  // - workbench.userDataSync.actions.turnOn
  // - workbench.view.debug.resetViewContainerLocation
  // - workbench.view.editSessions.resetViewContainerLocation
  // - workbench.view.explorer.resetViewContainerLocation
  // - workbench.view.extension.cmake__viewContainer
  // - workbench.view.extension.cmake__viewContainer.resetViewContainerLocation
  // - workbench.view.extension.makefile__viewContainer
  // - workbench.view.extension.makefile__viewContainer.resetViewContainerLocation
  // - workbench.view.extension.platformio
  // - workbench.view.extension.platformio.resetViewContainerLocation
  // - workbench.view.extension.references-view
  // - workbench.view.extension.references-view.resetViewContainerLocation
  // - workbench.view.extension.terraform
  // - workbench.view.extension.terraform.resetViewContainerLocation
  // - workbench.view.extension.test
  // - workbench.view.extension.test.resetViewContainerLocation
  // - workbench.view.extensions.resetViewContainerLocation
  // - workbench.view.remote
  // - workbench.view.remote.resetViewContainerLocation
  // - workbench.view.scm.resetViewContainerLocation
  // - workbench.view.search.focus
  // - workbench.view.search.removeView
  // - workbench.view.search.resetViewContainerLocation
  // - workbench.view.search.resetViewLocation
  // - workbench.view.search.toggleVisibility
  // - workbench.view.sync
  // - workbench.view.sync.resetViewContainerLocation
  // - workbench.view.testing.focus
  // - workbench.view.testing.resetViewLocation
  // - workbench.views.editSessions.data.focus
  // - workbench.views.editSessions.data.resetViewLocation
  // - workbench.views.extensions.builtinFeatureExtensions.focus
  // - workbench.views.extensions.builtinFeatureExtensions.resetViewLocation
  // - workbench.views.extensions.builtinProgrammingLanguageExtensions.focus
  // - workbench.views.extensions.builtinProgrammingLanguageExtensions.resetViewLocation
  // - workbench.views.extensions.builtinThemeExtensions.focus
  // - workbench.views.extensions.builtinThemeExtensions.resetViewLocation
  // - workbench.views.extensions.deprecatedExtensions.focus
  // - workbench.views.extensions.deprecatedExtensions.resetViewLocation
  // - workbench.views.extensions.disabled.focus
  // - workbench.views.extensions.disabled.resetViewLocation
  // - workbench.views.extensions.enabled.focus
  // - workbench.views.extensions.enabled.resetViewLocation
  // - workbench.views.extensions.installed.focus
  // - workbench.views.extensions.installed.resetViewLocation
  // - workbench.views.extensions.marketplace.focus
  // - workbench.views.extensions.marketplace.resetViewLocation
  // - workbench.views.extensions.otherRecommendations.focus
  // - workbench.views.extensions.otherRecommendations.resetViewLocation
  // - workbench.views.extensions.popular.focus
  // - workbench.views.extensions.popular.resetViewLocation
  // - workbench.views.extensions.searchBuiltin.focus
  // - workbench.views.extensions.searchBuiltin.resetViewLocation
  // - workbench.views.extensions.searchDisabled.focus
  // - workbench.views.extensions.searchDisabled.resetViewLocation
  // - workbench.views.extensions.searchEnabled.focus
  // - workbench.views.extensions.searchEnabled.resetViewLocation
  // - workbench.views.extensions.searchInstalled.focus
  // - workbench.views.extensions.searchInstalled.resetViewLocation
  // - workbench.views.extensions.searchOutdated.focus
  // - workbench.views.extensions.searchOutdated.resetViewLocation
  // - workbench.views.extensions.searchRecentlyUpdated.focus
  // - workbench.views.extensions.searchRecentlyUpdated.resetViewLocation
  // - workbench.views.extensions.searchWorkspaceUnsupported.focus
  // - workbench.views.extensions.searchWorkspaceUnsupported.resetViewLocation
  // - workbench.views.extensions.untrustedPartiallySupportedExtensions.focus
  // - workbench.views.extensions.untrustedPartiallySupportedExtensions.resetViewLocation
  // - workbench.views.extensions.untrustedUnsupportedExtensions.focus
  // - workbench.views.extensions.untrustedUnsupportedExtensions.resetViewLocation
  // - workbench.views.extensions.virtualPartiallySupportedExtensions.focus
  // - workbench.views.extensions.virtualPartiallySupportedExtensions.resetViewLocation
  // - workbench.views.extensions.virtualUnsupportedExtensions.focus
  // - workbench.views.extensions.virtualUnsupportedExtensions.resetViewLocation
  // - workbench.views.extensions.workspaceRecommendations.focus
  // - workbench.views.extensions.workspaceRecommendations.resetViewLocation
  // - workbench.views.sync.conflicts.focus
  // - workbench.views.sync.conflicts.resetViewLocation
  // - workbench.views.sync.localActivity.focus
  // - workbench.views.sync.localActivity.resetViewLocation
  // - workbench.views.sync.machines.focus
  // - workbench.views.sync.machines.resetViewLocation
  // - workbench.views.sync.remoteActivity.focus
  // - workbench.views.sync.remoteActivity.resetViewLocation
  // - workbench.views.sync.troubleshoot.focus
  // - workbench.views.sync.troubleshoot.resetViewLocation
  {
    "key": "ctrl+numpad_add",
    "command": "-workbench.action.zoomIn"
  },
  {
    "key": "ctrl+shift+=",
    "command": "-workbench.action.zoomIn"
  },
  {
    "key": "ctrl+=",
    "command": "-workbench.action.zoomIn"
  },
  {
    "key": "ctrl+numpad_subtract",
    "command": "-workbench.action.zoomOut"
  },
  {
    "key": "ctrl+-",
    "command": "-workbench.action.zoomOut"
  },
  {
    "key": "ctrl+numpad0",
    "command": "-workbench.action.zoomReset"
  },
  {
    "key": "ctrl+alt+meta+i",
    "command": "editor.action.inspectTMScopes",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+alt+backspace",
    "command": "deleteAllLeft",
    "when": "editorTextFocus && !editorReadonly"
  },
  // removedkey
  {
    "key": "ctrl+pageup",
    "command": "-workbench.action.terminal.focusPrevious",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
  },
  // addedcustomkey
  {
    "key": "ctrl+shift+[",
    "command": "workbench.action.terminal.focusPrevious",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
  }
]
